-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_85a6_csc_0_v_csc_core_Pipeline_VITIS_LOOP_91_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_hresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_hresampled_empty_n : IN STD_LOGIC;
    stream_in_hresampled_read : OUT STD_LOGIC;
    stream_csc_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_csc_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_full_n : IN STD_LOGIC;
    stream_csc_write : OUT STD_LOGIC;
    add_ln89 : IN STD_LOGIC_VECTOR (12 downto 0);
    ColStart_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ColEnd_read : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp20_not : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp17_not : IN STD_LOGIC_VECTOR (0 downto 0);
    K11_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K11_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K12_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K12_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K13_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K13_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K21_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K21_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K22_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K22_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K23_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K23_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K31_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K31_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K32_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K32_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K33_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K33_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ClipMax_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ClipMax_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ClampMin_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ClampMin_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    BOffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
    BOffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0);
    GOffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
    GOffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0);
    ROffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
    ROffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of bd_85a6_csc_0_v_csc_core_Pipeline_VITIS_LOOP_91_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv22_800 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_in_hresampled_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_csc_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln105_2_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1153_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1153_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_2_reg_1153_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Rpix_fu_450_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rpix_reg_1171 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rpix_reg_1171_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Gpix_reg_1176 : STD_LOGIC_VECTOR (7 downto 0);
    signal Gpix_reg_1176_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln95_fu_474_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln147_fu_640_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln147_reg_1208 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln147_fu_646_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln147_reg_1213 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln149_fu_686_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln149_reg_1223 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln149_fu_692_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln149_reg_1228 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln151_fu_732_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln151_reg_1238 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln151_fu_738_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln151_reg_1243 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln153_1_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_1_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln155_1_fu_940_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln155_1_reg_1253 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln154_1_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln154_1_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_140 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_5_fu_439_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln91_fu_363_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln103_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Bpix_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal coef33_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef23_fu_483_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef13_fu_478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln105_11_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln105_12_fu_548_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln105_13_fu_561_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal coef32_fu_530_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef31_fu_525_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef22_fu_520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef21_fu_515_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef12_fu_510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef11_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal offsetR_fu_566_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln147_fu_604_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln147_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_fu_598_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln147_fu_614_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln147_1_fu_624_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_1_fu_601_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln147_1_fu_624_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln147_2_fu_630_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln147_1_fu_620_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln147_4_fu_634_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal offsetG_fu_553_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln149_fu_650_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln149_fu_660_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln149_fu_660_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln149_1_fu_670_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln149_1_fu_670_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln149_2_fu_676_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln149_1_fu_666_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln149_4_fu_680_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal offsetB_fu_540_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal or_ln151_fu_696_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln151_fu_706_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln151_fu_706_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln151_1_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln151_1_fu_716_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln151_2_fu_722_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln151_1_fu_712_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln151_4_fu_726_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal min_val_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_val_fu_742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_972_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln147_1_fu_763_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln147_5_fu_766_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln147_4_fu_760_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln147_2_fu_774_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_982_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln149_1_fu_793_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln149_5_fu_796_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln149_4_fu_790_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln149_2_fu_804_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_992_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln151_1_fu_823_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln151_5_fu_826_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln151_4_fu_820_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln151_2_fu_834_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal Rres_fu_780_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln65_fu_752_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln65_1_fu_756_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln147_3_fu_769_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln153_1_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_862_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln153_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln153_fu_872_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Gres_fu_810_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln149_3_fu_799_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal Bres_fu_840_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln151_3_fu_829_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln155_1_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_fu_922_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln155_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln155_fu_932_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln154_1_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_fu_900_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln154_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln154_fu_948_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_972_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_982_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_972_ce : STD_LOGIC;
    signal grp_fu_982_ce : STD_LOGIC;
    signal grp_fu_992_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_85a6_csc_0_mul_16s_8ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component bd_85a6_csc_0_mac_muladd_8ns_16s_22s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component bd_85a6_csc_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_8ns_24_1_1_U153 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef11_fu_505_p3,
        din1 => mul_ln147_fu_614_p1,
        dout => mul_ln147_fu_614_p2);

    mul_16s_8ns_24_1_1_U154 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef12_fu_510_p3,
        din1 => mul_ln147_1_fu_624_p1,
        dout => mul_ln147_1_fu_624_p2);

    mul_16s_8ns_24_1_1_U155 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef21_fu_515_p3,
        din1 => mul_ln149_fu_660_p1,
        dout => mul_ln149_fu_660_p2);

    mul_16s_8ns_24_1_1_U156 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef22_fu_520_p3,
        din1 => mul_ln149_1_fu_670_p1,
        dout => mul_ln149_1_fu_670_p2);

    mul_16s_8ns_24_1_1_U157 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef31_fu_525_p3,
        din1 => mul_ln151_fu_706_p1,
        dout => mul_ln151_fu_706_p2);

    mul_16s_8ns_24_1_1_U158 : component bd_85a6_csc_0_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => coef32_fu_530_p3,
        din1 => mul_ln151_1_fu_716_p1,
        dout => mul_ln151_1_fu_716_p2);

    mac_muladd_8ns_16s_22s_25_4_1_U159 : component bd_85a6_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_972_p0,
        din1 => coef13_fu_478_p3,
        din2 => or_ln147_fu_604_p2,
        ce => grp_fu_972_ce,
        dout => grp_fu_972_p3);

    mac_muladd_8ns_16s_22s_25_4_1_U160 : component bd_85a6_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_982_p0,
        din1 => coef23_fu_483_p3,
        din2 => or_ln149_fu_650_p2,
        ce => grp_fu_982_ce,
        dout => grp_fu_982_p3);

    mac_muladd_8ns_16s_22s_25_4_1_U161 : component bd_85a6_csc_0_mac_muladd_8ns_16s_22s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_992_p0,
        din1 => coef33_fu_488_p3,
        din2 => or_ln151_fu_696_p2,
        ce => grp_fu_992_ce,
        dout => grp_fu_992_p3);

    flow_control_loop_pipe_sequential_init_U : component bd_85a6_csc_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    x_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_367_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_140 <= x_5_fu_439_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_140 <= ap_const_lv13_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Gpix_reg_1176 <= stream_in_hresampled_dout(15 downto 8);
                Rpix_reg_1171 <= Rpix_fu_450_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                or_ln105_2_reg_1153_pp0_iter1_reg <= or_ln105_2_reg_1153;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Gpix_reg_1176_pp0_iter2_reg <= Gpix_reg_1176;
                Rpix_reg_1171_pp0_iter2_reg <= Rpix_reg_1171;
                add_ln147_reg_1208 <= add_ln147_fu_640_p2;
                add_ln149_reg_1223 <= add_ln149_fu_686_p2;
                add_ln151_reg_1238 <= add_ln151_fu_732_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                or_ln105_2_reg_1153_pp0_iter2_reg <= or_ln105_2_reg_1153_pp0_iter1_reg;
                or_ln105_2_reg_1153_pp0_iter3_reg <= or_ln105_2_reg_1153_pp0_iter2_reg;
                select_ln153_1_reg_1248 <= select_ln153_1_fu_880_p3;
                select_ln154_1_reg_1258 <= select_ln154_1_fu_956_p3;
                select_ln155_1_reg_1253 <= select_ln155_1_fu_940_p3;
                trunc_ln147_reg_1213 <= trunc_ln147_fu_646_p1;
                trunc_ln149_reg_1228 <= trunc_ln149_fu_692_p1;
                trunc_ln151_reg_1243 <= trunc_ln151_fu_738_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_367_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln105_2_reg_1153 <= or_ln105_2_fu_433_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Bpix_fu_464_p4 <= stream_in_hresampled_dout(23 downto 16);
    Bres_fu_840_p4 <= add_ln151_2_fu_834_p2(25 downto 12);
    Gres_fu_810_p4 <= add_ln149_2_fu_804_p2(25 downto 12);
    Rpix_fu_450_p1 <= stream_in_hresampled_dout(8 - 1 downto 0);
    Rres_fu_780_p4 <= add_ln147_2_fu_774_p2(25 downto 12);
    add_ln147_2_fu_774_p2 <= std_logic_vector(signed(sext_ln147_5_fu_766_p1) + signed(sext_ln147_4_fu_760_p1));
    add_ln147_3_fu_769_p2 <= std_logic_vector(unsigned(trunc_ln147_1_fu_763_p1) + unsigned(trunc_ln147_reg_1213));
    add_ln147_4_fu_634_p2 <= std_logic_vector(signed(mul_ln147_1_fu_624_p2) + signed(mul_ln147_fu_614_p2));
    add_ln147_fu_640_p2 <= std_logic_vector(signed(sext_ln147_2_fu_630_p1) + signed(sext_ln147_1_fu_620_p1));
    add_ln149_2_fu_804_p2 <= std_logic_vector(signed(sext_ln149_5_fu_796_p1) + signed(sext_ln149_4_fu_790_p1));
    add_ln149_3_fu_799_p2 <= std_logic_vector(unsigned(trunc_ln149_1_fu_793_p1) + unsigned(trunc_ln149_reg_1228));
    add_ln149_4_fu_680_p2 <= std_logic_vector(signed(mul_ln149_1_fu_670_p2) + signed(mul_ln149_fu_660_p2));
    add_ln149_fu_686_p2 <= std_logic_vector(signed(sext_ln149_2_fu_676_p1) + signed(sext_ln149_1_fu_666_p1));
    add_ln151_2_fu_834_p2 <= std_logic_vector(signed(sext_ln151_5_fu_826_p1) + signed(sext_ln151_4_fu_820_p1));
    add_ln151_3_fu_829_p2 <= std_logic_vector(unsigned(trunc_ln151_1_fu_823_p1) + unsigned(trunc_ln151_reg_1243));
    add_ln151_4_fu_726_p2 <= std_logic_vector(signed(mul_ln151_1_fu_716_p2) + signed(mul_ln151_fu_706_p2));
    add_ln151_fu_732_p2 <= std_logic_vector(signed(sext_ln151_2_fu_722_p1) + signed(sext_ln151_1_fu_712_p1));
    and_ln104_fu_403_p2 <= (icmp_ln104_fu_391_p2 and icmp_ln104_1_fu_397_p2);
    and_ln105_fu_421_p2 <= (xor_ln105_fu_415_p2 and or_ln103_fu_385_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, stream_in_hresampled_empty_n, stream_csc_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((stream_csc_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((stream_in_hresampled_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_hresampled_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (stream_in_hresampled_empty_n = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(stream_csc_full_n)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (stream_csc_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_367_p2)
    begin
        if (((icmp_ln91_fu_367_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_140, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_4 <= ap_const_lv13_1;
        else 
            ap_sig_allocacmp_x_4 <= x_fu_140;
        end if; 
    end process;

    coef11_fu_505_p3 <= 
        K11_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K11_2_read;
    coef12_fu_510_p3 <= 
        K12_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K12_2_read;
    coef13_fu_478_p3 <= 
        K13_read when (or_ln105_2_reg_1153(0) = '1') else 
        K13_2_read;
    coef21_fu_515_p3 <= 
        K21_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K21_2_read;
    coef22_fu_520_p3 <= 
        K22_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K22_2_read;
    coef23_fu_483_p3 <= 
        K23_read when (or_ln105_2_reg_1153(0) = '1') else 
        K23_2_read;
    coef31_fu_525_p3 <= 
        K31_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K31_2_read;
    coef32_fu_530_p3 <= 
        K32_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        K32_2_read;
    coef33_fu_488_p3 <= 
        K33_read when (or_ln105_2_reg_1153(0) = '1') else 
        K33_2_read;

    grp_fu_972_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_972_ce <= ap_const_logic_1;
        else 
            grp_fu_972_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_972_p0 <= zext_ln95_fu_474_p1(8 - 1 downto 0);

    grp_fu_982_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_982_ce <= ap_const_logic_1;
        else 
            grp_fu_982_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_982_p0 <= zext_ln95_fu_474_p1(8 - 1 downto 0);

    grp_fu_992_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_992_ce <= ap_const_logic_1;
        else 
            grp_fu_992_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_992_p0 <= zext_ln95_fu_474_p1(8 - 1 downto 0);
    icmp_ln103_1_fu_379_p2 <= "1" when (zext_ln91_fu_363_p1 = ColEnd_read) else "0";
    icmp_ln103_fu_373_p2 <= "0" when (zext_ln91_fu_363_p1 = ColStart_read) else "1";
    icmp_ln104_1_fu_397_p2 <= "1" when (signed(zext_ln91_fu_363_p1) < signed(ColEnd_read)) else "0";
    icmp_ln104_fu_391_p2 <= "1" when (signed(zext_ln91_fu_363_p1) > signed(ColStart_read)) else "0";
    icmp_ln153_1_fu_856_p2 <= "1" when (signed(Rres_fu_780_p4) > signed(zext_ln65_1_fu_756_p1)) else "0";
    icmp_ln153_fu_850_p2 <= "1" when (signed(Rres_fu_780_p4) < signed(zext_ln65_fu_752_p1)) else "0";
    icmp_ln154_1_fu_894_p2 <= "1" when (signed(Gres_fu_810_p4) > signed(zext_ln65_1_fu_756_p1)) else "0";
    icmp_ln154_fu_888_p2 <= "1" when (signed(Gres_fu_810_p4) < signed(zext_ln65_fu_752_p1)) else "0";
    icmp_ln155_1_fu_916_p2 <= "1" when (signed(Bres_fu_840_p4) > signed(zext_ln65_1_fu_756_p1)) else "0";
    icmp_ln155_fu_910_p2 <= "1" when (signed(Bres_fu_840_p4) < signed(zext_ln65_fu_752_p1)) else "0";
    icmp_ln91_fu_367_p2 <= "1" when (ap_sig_allocacmp_x_4 = add_ln89) else "0";
    max_val_fu_742_p3 <= 
        ClipMax_read when (or_ln105_2_reg_1153_pp0_iter3_reg(0) = '1') else 
        ClipMax_2_read;
    min_val_fu_747_p3 <= 
        ClampMin_read when (or_ln105_2_reg_1153_pp0_iter3_reg(0) = '1') else 
        ClampMin_2_read;
    mul_ln147_1_fu_624_p1 <= zext_ln61_1_fu_601_p1(8 - 1 downto 0);
    mul_ln147_fu_614_p1 <= zext_ln61_fu_598_p1(8 - 1 downto 0);
    mul_ln149_1_fu_670_p1 <= zext_ln61_1_fu_601_p1(8 - 1 downto 0);
    mul_ln149_fu_660_p1 <= zext_ln61_fu_598_p1(8 - 1 downto 0);
    mul_ln151_1_fu_716_p1 <= zext_ln61_1_fu_601_p1(8 - 1 downto 0);
    mul_ln151_fu_706_p1 <= zext_ln61_fu_598_p1(8 - 1 downto 0);
    offsetB_fu_540_p3 <= (select_ln105_11_fu_535_p3 & ap_const_lv12_0);
    offsetG_fu_553_p3 <= (select_ln105_12_fu_548_p3 & ap_const_lv12_0);
    offsetR_fu_566_p3 <= (select_ln105_13_fu_561_p3 & ap_const_lv12_0);
    or_ln103_fu_385_p2 <= (icmp_ln103_fu_373_p2 or icmp_ln103_1_fu_379_p2);
    or_ln105_1_fu_427_p2 <= (cmp20_not or and_ln105_fu_421_p2);
    or_ln105_2_fu_433_p2 <= (or_ln105_1_fu_427_p2 or cmp17_not);
    or_ln105_fu_409_p2 <= (icmp_ln103_1_fu_379_p2 or and_ln104_fu_403_p2);
    or_ln147_fu_604_p2 <= (offsetR_fu_566_p3 or ap_const_lv22_800);
    or_ln149_fu_650_p2 <= (offsetG_fu_553_p3 or ap_const_lv22_800);
    or_ln151_fu_696_p2 <= (offsetB_fu_540_p3 or ap_const_lv22_800);
    select_ln105_11_fu_535_p3 <= 
        BOffset_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        BOffset_2_read;
    select_ln105_12_fu_548_p3 <= 
        GOffset_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        GOffset_2_read;
    select_ln105_13_fu_561_p3 <= 
        ROffset_read when (or_ln105_2_reg_1153_pp0_iter2_reg(0) = '1') else 
        ROffset_2_read;
    select_ln153_1_fu_880_p3 <= 
        min_val_fu_747_p3 when (icmp_ln153_fu_850_p2(0) = '1') else 
        select_ln153_fu_872_p3;
    select_ln153_fu_872_p3 <= 
        max_val_fu_742_p3 when (icmp_ln153_1_fu_856_p2(0) = '1') else 
        trunc_ln_fu_862_p4;
    select_ln154_1_fu_956_p3 <= 
        min_val_fu_747_p3 when (icmp_ln154_fu_888_p2(0) = '1') else 
        select_ln154_fu_948_p3;
    select_ln154_fu_948_p3 <= 
        max_val_fu_742_p3 when (icmp_ln154_1_fu_894_p2(0) = '1') else 
        trunc_ln4_fu_900_p4;
    select_ln155_1_fu_940_p3 <= 
        min_val_fu_747_p3 when (icmp_ln155_fu_910_p2(0) = '1') else 
        select_ln155_fu_932_p3;
    select_ln155_fu_932_p3 <= 
        max_val_fu_742_p3 when (icmp_ln155_1_fu_916_p2(0) = '1') else 
        trunc_ln5_fu_922_p4;
        sext_ln147_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln147_fu_614_p2),25));

        sext_ln147_2_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln147_1_fu_624_p2),25));

        sext_ln147_4_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln147_reg_1208),26));

        sext_ln147_5_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_972_p3),26));

        sext_ln149_1_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_fu_660_p2),25));

        sext_ln149_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln149_1_fu_670_p2),25));

        sext_ln149_4_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln149_reg_1223),26));

        sext_ln149_5_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_982_p3),26));

        sext_ln151_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln151_fu_706_p2),25));

        sext_ln151_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln151_1_fu_716_p2),25));

        sext_ln151_4_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln151_reg_1238),26));

        sext_ln151_5_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_992_p3),26));


    stream_csc_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, stream_csc_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_csc_blk_n <= stream_csc_full_n;
        else 
            stream_csc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_csc_din <= ((select_ln155_1_reg_1253 & select_ln154_1_reg_1258) & select_ln153_1_reg_1248);

    stream_csc_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_csc_write <= ap_const_logic_1;
        else 
            stream_csc_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_hresampled_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in_hresampled_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_hresampled_blk_n <= stream_in_hresampled_empty_n;
        else 
            stream_in_hresampled_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_hresampled_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_hresampled_read <= ap_const_logic_1;
        else 
            stream_in_hresampled_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln147_1_fu_763_p1 <= grp_fu_972_p3(20 - 1 downto 0);
    trunc_ln147_fu_646_p1 <= add_ln147_4_fu_634_p2(20 - 1 downto 0);
    trunc_ln149_1_fu_793_p1 <= grp_fu_982_p3(20 - 1 downto 0);
    trunc_ln149_fu_692_p1 <= add_ln149_4_fu_680_p2(20 - 1 downto 0);
    trunc_ln151_1_fu_823_p1 <= grp_fu_992_p3(20 - 1 downto 0);
    trunc_ln151_fu_738_p1 <= add_ln151_4_fu_726_p2(20 - 1 downto 0);
    trunc_ln4_fu_900_p4 <= add_ln149_3_fu_799_p2(19 downto 12);
    trunc_ln5_fu_922_p4 <= add_ln151_3_fu_829_p2(19 downto 12);
    trunc_ln_fu_862_p4 <= add_ln147_3_fu_769_p2(19 downto 12);
    x_5_fu_439_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_4) + unsigned(ap_const_lv13_1));
    xor_ln105_fu_415_p2 <= (or_ln105_fu_409_p2 xor ap_const_lv1_1);
    zext_ln61_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Gpix_reg_1176_pp0_iter2_reg),24));
    zext_ln61_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rpix_reg_1171_pp0_iter2_reg),24));
    zext_ln65_1_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_fu_742_p3),14));
    zext_ln65_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_val_fu_747_p3),14));
    zext_ln91_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_4),16));
    zext_ln95_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Bpix_fu_464_p4),24));
end behav;
