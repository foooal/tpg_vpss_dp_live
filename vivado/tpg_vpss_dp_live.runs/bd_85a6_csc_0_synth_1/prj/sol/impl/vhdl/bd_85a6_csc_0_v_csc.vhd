-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_85a6_csc_0_v_csc is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of bd_85a6_csc_0_v_csc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bd_85a6_csc_0_v_csc,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.334000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.748000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=14,HLS_SYN_DSP=0,HLS_SYN_FF=8857,HLS_SYN_LUT=10523,HLS_VERSION=2023_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal InVideoFormat : STD_LOGIC_VECTOR (7 downto 0);
    signal OutVideoFormat : STD_LOGIC_VECTOR (7 downto 0);
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal ColStart : STD_LOGIC_VECTOR (15 downto 0);
    signal ColEnd : STD_LOGIC_VECTOR (15 downto 0);
    signal RowStart : STD_LOGIC_VECTOR (15 downto 0);
    signal RowEnd : STD_LOGIC_VECTOR (15 downto 0);
    signal K11 : STD_LOGIC_VECTOR (15 downto 0);
    signal K12 : STD_LOGIC_VECTOR (15 downto 0);
    signal K13 : STD_LOGIC_VECTOR (15 downto 0);
    signal K21 : STD_LOGIC_VECTOR (15 downto 0);
    signal K22 : STD_LOGIC_VECTOR (15 downto 0);
    signal K23 : STD_LOGIC_VECTOR (15 downto 0);
    signal K31 : STD_LOGIC_VECTOR (15 downto 0);
    signal K32 : STD_LOGIC_VECTOR (15 downto 0);
    signal K33 : STD_LOGIC_VECTOR (15 downto 0);
    signal ROffset : STD_LOGIC_VECTOR (9 downto 0);
    signal GOffset : STD_LOGIC_VECTOR (9 downto 0);
    signal BOffset : STD_LOGIC_VECTOR (9 downto 0);
    signal ClampMin : STD_LOGIC_VECTOR (7 downto 0);
    signal ClipMax : STD_LOGIC_VECTOR (7 downto 0);
    signal K11_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K12_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K13_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K21_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K22_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K23_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K31_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K32_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal K33_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ROffset_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal GOffset_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal BOffset_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ClampMin_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ClipMax_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry3_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_15 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_16 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_17 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_18 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_19 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry3_proc_U0_ap_return_29 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_30 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_31 : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_entry3_proc_U0_ap_return_32 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_33 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry3_proc_U0_ap_return_34 : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry3_proc_U0_ap_return_35 : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry3_proc_U0_ap_return_36 : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry3_proc_U0_ap_return_37 : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry3_proc_U0_ap_return_38 : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_entry3_proc_U0_ap_return_39 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_channel_done_HwReg_height_c30_channel : STD_LOGIC;
    signal HwReg_height_c30_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_height_c30_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_height_c30_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_width_c24_channel : STD_LOGIC;
    signal HwReg_width_c24_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_width_c24_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_width_c24_channel : STD_LOGIC;
    signal ap_channel_done_bPassThru_422_or_420_Out_loc_channel : STD_LOGIC;
    signal bPassThru_422_or_420_Out_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_bPassThru_422_or_420_Out_loc_channel : STD_LOGIC;
    signal ap_channel_done_bPassThru_422_or_420_In_loc_channel : STD_LOGIC;
    signal bPassThru_422_or_420_In_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_bPassThru_422_or_420_In_loc_channel : STD_LOGIC;
    signal ap_channel_done_bPassThru_420_Out_loc_channel : STD_LOGIC;
    signal bPassThru_420_Out_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_bPassThru_420_Out_loc_channel : STD_LOGIC;
    signal ap_channel_done_bPassThru_420_In_loc_channel : STD_LOGIC;
    signal bPassThru_420_In_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_bPassThru_420_In_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_bPassThru_420_In_loc_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ClipMax_2_channel : STD_LOGIC;
    signal HwReg_ClipMax_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ClipMax_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ClipMax_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ClampMin_2_channel : STD_LOGIC;
    signal HwReg_ClampMin_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ClampMin_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ClampMin_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_BOffset_2_channel : STD_LOGIC;
    signal HwReg_BOffset_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_BOffset_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_BOffset_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_GOffset_2_channel : STD_LOGIC;
    signal HwReg_GOffset_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_GOffset_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_GOffset_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ROffset_2_channel : STD_LOGIC;
    signal HwReg_ROffset_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ROffset_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ROffset_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K33_2_channel : STD_LOGIC;
    signal HwReg_K33_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K33_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K33_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K32_2_channel : STD_LOGIC;
    signal HwReg_K32_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K32_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K32_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K31_2_channel : STD_LOGIC;
    signal HwReg_K31_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K31_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K31_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K23_2_channel : STD_LOGIC;
    signal HwReg_K23_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K23_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K23_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K22_2_channel : STD_LOGIC;
    signal HwReg_K22_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K22_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K22_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K21_2_channel : STD_LOGIC;
    signal HwReg_K21_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K21_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K21_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K13_2_channel : STD_LOGIC;
    signal HwReg_K13_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K13_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K13_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K12_2_channel : STD_LOGIC;
    signal HwReg_K12_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K12_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K12_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K11_2_channel : STD_LOGIC;
    signal HwReg_K11_2_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K11_2_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K11_2_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ClipMax_channel : STD_LOGIC;
    signal HwReg_ClipMax_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ClipMax_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ClipMax_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ClampMin_channel : STD_LOGIC;
    signal HwReg_ClampMin_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ClampMin_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ClampMin_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_BOffset_channel : STD_LOGIC;
    signal HwReg_BOffset_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_BOffset_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_BOffset_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_GOffset_channel : STD_LOGIC;
    signal HwReg_GOffset_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_GOffset_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_GOffset_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ROffset_channel : STD_LOGIC;
    signal HwReg_ROffset_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ROffset_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ROffset_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K33_channel : STD_LOGIC;
    signal HwReg_K33_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K33_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K33_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K32_channel : STD_LOGIC;
    signal HwReg_K32_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K32_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K32_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K31_channel : STD_LOGIC;
    signal HwReg_K31_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K31_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K31_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K23_channel : STD_LOGIC;
    signal HwReg_K23_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K23_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K23_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K22_channel : STD_LOGIC;
    signal HwReg_K22_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K22_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K22_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K21_channel : STD_LOGIC;
    signal HwReg_K21_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K21_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K21_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K13_channel : STD_LOGIC;
    signal HwReg_K13_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K13_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K13_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K12_channel : STD_LOGIC;
    signal HwReg_K12_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K12_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K12_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_K11_channel : STD_LOGIC;
    signal HwReg_K11_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_K11_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_K11_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_RowEnd_channel : STD_LOGIC;
    signal HwReg_RowEnd_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_RowEnd_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_RowEnd_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_RowStart_channel : STD_LOGIC;
    signal HwReg_RowStart_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_RowStart_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_RowStart_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ColEnd_channel : STD_LOGIC;
    signal HwReg_ColEnd_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ColEnd_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ColEnd_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_ColStart_channel : STD_LOGIC;
    signal HwReg_ColStart_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_ColStart_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_ColStart_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_OutVideoFormat_channel : STD_LOGIC;
    signal HwReg_OutVideoFormat_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_OutVideoFormat_channel : STD_LOGIC;
    signal ap_channel_done_HwReg_InVideoFormat_channel : STD_LOGIC;
    signal HwReg_InVideoFormat_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_HwReg_InVideoFormat_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_HwReg_InVideoFormat_channel : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_start : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_done : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_s_axis_video_TREADY : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_stream_in_din : STD_LOGIC_VECTOR (23 downto 0);
    signal AXIvideo2MultiPixStream_U0_stream_in_write : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_HwReg_width_c23_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2MultiPixStream_U0_HwReg_width_c23_write : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_HwReg_height_c29_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2MultiPixStream_U0_HwReg_height_c29_write : STD_LOGIC;
    signal v_vcresampler_core_1_U0_ap_start : STD_LOGIC;
    signal v_vcresampler_core_1_U0_ap_done : STD_LOGIC;
    signal v_vcresampler_core_1_U0_ap_continue : STD_LOGIC;
    signal v_vcresampler_core_1_U0_ap_idle : STD_LOGIC;
    signal v_vcresampler_core_1_U0_ap_ready : STD_LOGIC;
    signal v_vcresampler_core_1_U0_stream_in_read : STD_LOGIC;
    signal v_vcresampler_core_1_U0_HwReg_height_read : STD_LOGIC;
    signal v_vcresampler_core_1_U0_HwReg_width_read : STD_LOGIC;
    signal v_vcresampler_core_1_U0_stream_in_vresampled_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_vcresampler_core_1_U0_stream_in_vresampled_write : STD_LOGIC;
    signal v_vcresampler_core_1_U0_HwReg_width_c22_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_vcresampler_core_1_U0_HwReg_width_c22_write : STD_LOGIC;
    signal v_vcresampler_core_1_U0_HwReg_height_c28_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_vcresampler_core_1_U0_HwReg_height_c28_write : STD_LOGIC;
    signal v_hcresampler_core_2_U0_ap_start : STD_LOGIC;
    signal v_hcresampler_core_2_U0_ap_done : STD_LOGIC;
    signal v_hcresampler_core_2_U0_ap_continue : STD_LOGIC;
    signal v_hcresampler_core_2_U0_ap_idle : STD_LOGIC;
    signal v_hcresampler_core_2_U0_ap_ready : STD_LOGIC;
    signal v_hcresampler_core_2_U0_stream_in_vresampled_read : STD_LOGIC;
    signal v_hcresampler_core_2_U0_HwReg_height_read : STD_LOGIC;
    signal v_hcresampler_core_2_U0_HwReg_width_read : STD_LOGIC;
    signal v_hcresampler_core_2_U0_stream_in_hresampled_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_hcresampler_core_2_U0_stream_in_hresampled_write : STD_LOGIC;
    signal v_hcresampler_core_2_U0_HwReg_width_c21_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_hcresampler_core_2_U0_HwReg_width_c21_write : STD_LOGIC;
    signal v_hcresampler_core_2_U0_HwReg_height_c27_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_hcresampler_core_2_U0_HwReg_height_c27_write : STD_LOGIC;
    signal v_csc_core_U0_ap_start : STD_LOGIC;
    signal v_csc_core_U0_ap_done : STD_LOGIC;
    signal v_csc_core_U0_ap_continue : STD_LOGIC;
    signal v_csc_core_U0_ap_idle : STD_LOGIC;
    signal v_csc_core_U0_ap_ready : STD_LOGIC;
    signal v_csc_core_U0_stream_in_hresampled_read : STD_LOGIC;
    signal v_csc_core_U0_height_read : STD_LOGIC;
    signal v_csc_core_U0_width_read : STD_LOGIC;
    signal v_csc_core_U0_stream_csc_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_csc_core_U0_stream_csc_write : STD_LOGIC;
    signal v_csc_core_U0_HwReg_width_c20_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_csc_core_U0_HwReg_width_c20_write : STD_LOGIC;
    signal v_csc_core_U0_HwReg_height_c26_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_csc_core_U0_HwReg_height_c26_write : STD_LOGIC;
    signal v_hcresampler_core_U0_ap_start : STD_LOGIC;
    signal v_hcresampler_core_U0_ap_done : STD_LOGIC;
    signal v_hcresampler_core_U0_ap_continue : STD_LOGIC;
    signal v_hcresampler_core_U0_ap_idle : STD_LOGIC;
    signal v_hcresampler_core_U0_ap_ready : STD_LOGIC;
    signal v_hcresampler_core_U0_stream_csc_read : STD_LOGIC;
    signal v_hcresampler_core_U0_HwReg_height_read : STD_LOGIC;
    signal v_hcresampler_core_U0_HwReg_width_read : STD_LOGIC;
    signal v_hcresampler_core_U0_stream_out_hresampled_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_hcresampler_core_U0_stream_out_hresampled_write : STD_LOGIC;
    signal v_hcresampler_core_U0_HwReg_width_c19_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_hcresampler_core_U0_HwReg_width_c19_write : STD_LOGIC;
    signal v_hcresampler_core_U0_HwReg_height_c25_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_hcresampler_core_U0_HwReg_height_c25_write : STD_LOGIC;
    signal v_vcresampler_core_U0_ap_start : STD_LOGIC;
    signal v_vcresampler_core_U0_ap_done : STD_LOGIC;
    signal v_vcresampler_core_U0_ap_continue : STD_LOGIC;
    signal v_vcresampler_core_U0_ap_idle : STD_LOGIC;
    signal v_vcresampler_core_U0_ap_ready : STD_LOGIC;
    signal v_vcresampler_core_U0_stream_out_hresampled_read : STD_LOGIC;
    signal v_vcresampler_core_U0_HwReg_height_read : STD_LOGIC;
    signal v_vcresampler_core_U0_HwReg_width_read : STD_LOGIC;
    signal v_vcresampler_core_U0_stream_out_vresampled_din : STD_LOGIC_VECTOR (23 downto 0);
    signal v_vcresampler_core_U0_stream_out_vresampled_write : STD_LOGIC;
    signal v_vcresampler_core_U0_HwReg_width_c_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_vcresampler_core_U0_HwReg_width_c_write : STD_LOGIC;
    signal v_vcresampler_core_U0_HwReg_height_c_din : STD_LOGIC_VECTOR (11 downto 0);
    signal v_vcresampler_core_U0_HwReg_height_c_write : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_stream_out_vresampled_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_Height_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_WidthOut_read : STD_LOGIC;
    signal HwReg_InVideoFormat_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_InVideoFormat_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_InVideoFormat_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_InVideoFormat_channel_empty_n : STD_LOGIC;
    signal HwReg_OutVideoFormat_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_OutVideoFormat_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_OutVideoFormat_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_OutVideoFormat_channel_empty_n : STD_LOGIC;
    signal HwReg_ColStart_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_ColStart_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ColStart_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ColStart_channel_empty_n : STD_LOGIC;
    signal HwReg_ColEnd_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_ColEnd_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ColEnd_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ColEnd_channel_empty_n : STD_LOGIC;
    signal HwReg_RowStart_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_RowStart_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_RowStart_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_RowStart_channel_empty_n : STD_LOGIC;
    signal HwReg_RowEnd_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_RowEnd_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_RowEnd_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_RowEnd_channel_empty_n : STD_LOGIC;
    signal HwReg_K11_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K11_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K11_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K11_channel_empty_n : STD_LOGIC;
    signal HwReg_K12_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K12_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K12_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K12_channel_empty_n : STD_LOGIC;
    signal HwReg_K13_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K13_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K13_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K13_channel_empty_n : STD_LOGIC;
    signal HwReg_K21_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K21_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K21_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K21_channel_empty_n : STD_LOGIC;
    signal HwReg_K22_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K22_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K22_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K22_channel_empty_n : STD_LOGIC;
    signal HwReg_K23_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K23_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K23_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K23_channel_empty_n : STD_LOGIC;
    signal HwReg_K31_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K31_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K31_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K31_channel_empty_n : STD_LOGIC;
    signal HwReg_K32_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K32_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K32_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K32_channel_empty_n : STD_LOGIC;
    signal HwReg_K33_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K33_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K33_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K33_channel_empty_n : STD_LOGIC;
    signal HwReg_ROffset_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_ROffset_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ROffset_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ROffset_channel_empty_n : STD_LOGIC;
    signal HwReg_GOffset_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_GOffset_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_GOffset_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_GOffset_channel_empty_n : STD_LOGIC;
    signal HwReg_BOffset_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_BOffset_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_BOffset_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_BOffset_channel_empty_n : STD_LOGIC;
    signal HwReg_ClampMin_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_ClampMin_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClampMin_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClampMin_channel_empty_n : STD_LOGIC;
    signal HwReg_ClipMax_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_ClipMax_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClipMax_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClipMax_channel_empty_n : STD_LOGIC;
    signal HwReg_K11_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K11_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K11_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K11_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K12_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K12_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K12_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K12_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K13_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K13_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K13_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K13_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K21_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K21_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K21_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K21_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K22_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K22_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K22_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K22_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K23_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K23_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K23_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K23_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K31_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K31_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K31_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K31_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K32_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K32_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K32_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K32_2_channel_empty_n : STD_LOGIC;
    signal HwReg_K33_2_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal HwReg_K33_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K33_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_K33_2_channel_empty_n : STD_LOGIC;
    signal HwReg_ROffset_2_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_ROffset_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ROffset_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ROffset_2_channel_empty_n : STD_LOGIC;
    signal HwReg_GOffset_2_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_GOffset_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_GOffset_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_GOffset_2_channel_empty_n : STD_LOGIC;
    signal HwReg_BOffset_2_channel_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal HwReg_BOffset_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_BOffset_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_BOffset_2_channel_empty_n : STD_LOGIC;
    signal HwReg_ClampMin_2_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_ClampMin_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClampMin_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClampMin_2_channel_empty_n : STD_LOGIC;
    signal HwReg_ClipMax_2_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal HwReg_ClipMax_2_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClipMax_2_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal HwReg_ClipMax_2_channel_empty_n : STD_LOGIC;
    signal bPassThru_420_In_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal bPassThru_420_In_loc_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal bPassThru_420_In_loc_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal bPassThru_420_In_loc_channel_empty_n : STD_LOGIC;
    signal bPassThru_420_Out_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal bPassThru_420_Out_loc_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal bPassThru_420_Out_loc_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal bPassThru_420_Out_loc_channel_empty_n : STD_LOGIC;
    signal bPassThru_422_or_420_In_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal bPassThru_422_or_420_In_loc_channel_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal bPassThru_422_or_420_In_loc_channel_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal bPassThru_422_or_420_In_loc_channel_empty_n : STD_LOGIC;
    signal bPassThru_422_or_420_Out_loc_channel_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal bPassThru_422_or_420_Out_loc_channel_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal bPassThru_422_or_420_Out_loc_channel_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal bPassThru_422_or_420_Out_loc_channel_empty_n : STD_LOGIC;
    signal HwReg_width_c24_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c24_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c24_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c24_channel_empty_n : STD_LOGIC;
    signal HwReg_height_c30_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c30_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c30_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c30_channel_empty_n : STD_LOGIC;
    signal stream_in_full_n : STD_LOGIC;
    signal stream_in_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_empty_n : STD_LOGIC;
    signal HwReg_width_c23_full_n : STD_LOGIC;
    signal HwReg_width_c23_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c23_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c23_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c23_empty_n : STD_LOGIC;
    signal HwReg_height_c29_full_n : STD_LOGIC;
    signal HwReg_height_c29_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c29_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c29_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c29_empty_n : STD_LOGIC;
    signal stream_in_vresampled_full_n : STD_LOGIC;
    signal stream_in_vresampled_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_vresampled_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_vresampled_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_vresampled_empty_n : STD_LOGIC;
    signal HwReg_width_c22_full_n : STD_LOGIC;
    signal HwReg_width_c22_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c22_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c22_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c22_empty_n : STD_LOGIC;
    signal HwReg_height_c28_full_n : STD_LOGIC;
    signal HwReg_height_c28_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c28_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c28_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c28_empty_n : STD_LOGIC;
    signal stream_in_hresampled_full_n : STD_LOGIC;
    signal stream_in_hresampled_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_hresampled_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_hresampled_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_hresampled_empty_n : STD_LOGIC;
    signal HwReg_width_c21_full_n : STD_LOGIC;
    signal HwReg_width_c21_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c21_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c21_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c21_empty_n : STD_LOGIC;
    signal HwReg_height_c27_full_n : STD_LOGIC;
    signal HwReg_height_c27_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c27_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c27_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c27_empty_n : STD_LOGIC;
    signal stream_csc_full_n : STD_LOGIC;
    signal stream_csc_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_csc_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_csc_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_csc_empty_n : STD_LOGIC;
    signal HwReg_width_c20_full_n : STD_LOGIC;
    signal HwReg_width_c20_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c20_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c20_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c20_empty_n : STD_LOGIC;
    signal HwReg_height_c26_full_n : STD_LOGIC;
    signal HwReg_height_c26_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c26_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c26_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c26_empty_n : STD_LOGIC;
    signal stream_out_hresampled_full_n : STD_LOGIC;
    signal stream_out_hresampled_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_hresampled_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_hresampled_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_hresampled_empty_n : STD_LOGIC;
    signal HwReg_width_c19_full_n : STD_LOGIC;
    signal HwReg_width_c19_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c19_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c19_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c19_empty_n : STD_LOGIC;
    signal HwReg_height_c25_full_n : STD_LOGIC;
    signal HwReg_height_c25_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c25_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c25_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c25_empty_n : STD_LOGIC;
    signal stream_out_vresampled_full_n : STD_LOGIC;
    signal stream_out_vresampled_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_vresampled_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_vresampled_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_vresampled_empty_n : STD_LOGIC;
    signal HwReg_width_c_full_n : STD_LOGIC;
    signal HwReg_width_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_width_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_width_c_empty_n : STD_LOGIC;
    signal HwReg_height_c_full_n : STD_LOGIC;
    signal HwReg_height_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_height_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal HwReg_height_c_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_85a6_csc_0_Block_entry3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        InVideoFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        OutVideoFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        ColStart : IN STD_LOGIC_VECTOR (15 downto 0);
        ColEnd : IN STD_LOGIC_VECTOR (15 downto 0);
        RowStart : IN STD_LOGIC_VECTOR (15 downto 0);
        RowEnd : IN STD_LOGIC_VECTOR (15 downto 0);
        K11 : IN STD_LOGIC_VECTOR (15 downto 0);
        K12 : IN STD_LOGIC_VECTOR (15 downto 0);
        K13 : IN STD_LOGIC_VECTOR (15 downto 0);
        K21 : IN STD_LOGIC_VECTOR (15 downto 0);
        K22 : IN STD_LOGIC_VECTOR (15 downto 0);
        K23 : IN STD_LOGIC_VECTOR (15 downto 0);
        K31 : IN STD_LOGIC_VECTOR (15 downto 0);
        K32 : IN STD_LOGIC_VECTOR (15 downto 0);
        K33 : IN STD_LOGIC_VECTOR (15 downto 0);
        ROffset : IN STD_LOGIC_VECTOR (9 downto 0);
        GOffset : IN STD_LOGIC_VECTOR (9 downto 0);
        BOffset : IN STD_LOGIC_VECTOR (9 downto 0);
        ClampMin : IN STD_LOGIC_VECTOR (7 downto 0);
        ClipMax : IN STD_LOGIC_VECTOR (7 downto 0);
        K11_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K12_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K13_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K21_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K22_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K23_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K31_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K32_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        K33_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ROffset_2 : IN STD_LOGIC_VECTOR (9 downto 0);
        GOffset_2 : IN STD_LOGIC_VECTOR (9 downto 0);
        BOffset_2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ClampMin_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ClipMax_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component bd_85a6_csc_0_AXIvideo2MultiPixStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_in_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_full_n : IN STD_LOGIC;
        stream_in_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (11 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        HwReg_width_c23_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c23_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c23_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c23_full_n : IN STD_LOGIC;
        HwReg_width_c23_write : OUT STD_LOGIC;
        HwReg_height_c29_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c29_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c29_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c29_full_n : IN STD_LOGIC;
        HwReg_height_c29_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_v_vcresampler_core_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_in_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_empty_n : IN STD_LOGIC;
        stream_in_read : OUT STD_LOGIC;
        HwReg_height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_empty_n : IN STD_LOGIC;
        HwReg_height_read : OUT STD_LOGIC;
        HwReg_width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_empty_n : IN STD_LOGIC;
        HwReg_width_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_vresampled_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_in_vresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_vresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_vresampled_full_n : IN STD_LOGIC;
        stream_in_vresampled_write : OUT STD_LOGIC;
        HwReg_width_c22_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c22_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c22_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c22_full_n : IN STD_LOGIC;
        HwReg_width_c22_write : OUT STD_LOGIC;
        HwReg_height_c28_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c28_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c28_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c28_full_n : IN STD_LOGIC;
        HwReg_height_c28_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_v_hcresampler_core_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_vresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_in_vresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_vresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_vresampled_empty_n : IN STD_LOGIC;
        stream_in_vresampled_read : OUT STD_LOGIC;
        HwReg_height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_empty_n : IN STD_LOGIC;
        HwReg_height_read : OUT STD_LOGIC;
        HwReg_width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_empty_n : IN STD_LOGIC;
        HwReg_width_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_hresampled_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_in_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_hresampled_full_n : IN STD_LOGIC;
        stream_in_hresampled_write : OUT STD_LOGIC;
        HwReg_width_c21_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c21_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c21_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c21_full_n : IN STD_LOGIC;
        HwReg_width_c21_write : OUT STD_LOGIC;
        HwReg_height_c27_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c27_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c27_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c27_full_n : IN STD_LOGIC;
        HwReg_height_c27_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_v_csc_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_hresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_in_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_in_hresampled_empty_n : IN STD_LOGIC;
        stream_in_hresampled_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        ColStart_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ColEnd_read : IN STD_LOGIC_VECTOR (15 downto 0);
        RowStart_read : IN STD_LOGIC_VECTOR (15 downto 0);
        RowEnd_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K11_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K12_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K13_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K21_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K22_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K23_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K31_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K32_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K33_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ROffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
        GOffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
        BOffset_read : IN STD_LOGIC_VECTOR (9 downto 0);
        ClampMin_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ClipMax_read : IN STD_LOGIC_VECTOR (7 downto 0);
        K11_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K12_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K13_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K21_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K22_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K23_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K31_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K32_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        K33_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ROffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0);
        GOffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0);
        BOffset_2_read : IN STD_LOGIC_VECTOR (9 downto 0);
        ClampMin_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ClipMax_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        stream_csc_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_csc_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_csc_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_csc_full_n : IN STD_LOGIC;
        stream_csc_write : OUT STD_LOGIC;
        HwReg_width_c20_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c20_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c20_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c20_full_n : IN STD_LOGIC;
        HwReg_width_c20_write : OUT STD_LOGIC;
        HwReg_height_c26_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c26_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c26_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c26_full_n : IN STD_LOGIC;
        HwReg_height_c26_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_v_hcresampler_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_csc_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_csc_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_csc_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_csc_empty_n : IN STD_LOGIC;
        stream_csc_read : OUT STD_LOGIC;
        HwReg_height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_empty_n : IN STD_LOGIC;
        HwReg_height_read : OUT STD_LOGIC;
        HwReg_width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_empty_n : IN STD_LOGIC;
        HwReg_width_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_out_hresampled_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_out_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_hresampled_full_n : IN STD_LOGIC;
        stream_out_hresampled_write : OUT STD_LOGIC;
        HwReg_width_c19_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c19_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c19_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c19_full_n : IN STD_LOGIC;
        HwReg_width_c19_write : OUT STD_LOGIC;
        HwReg_height_c25_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c25_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c25_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c25_full_n : IN STD_LOGIC;
        HwReg_height_c25_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_v_vcresampler_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_out_hresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_out_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_hresampled_empty_n : IN STD_LOGIC;
        stream_out_hresampled_read : OUT STD_LOGIC;
        HwReg_height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_empty_n : IN STD_LOGIC;
        HwReg_height_read : OUT STD_LOGIC;
        HwReg_width_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_empty_n : IN STD_LOGIC;
        HwReg_width_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_out_vresampled_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        stream_out_vresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_vresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_vresampled_full_n : IN STD_LOGIC;
        stream_out_vresampled_write : OUT STD_LOGIC;
        HwReg_width_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_width_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_width_c_full_n : IN STD_LOGIC;
        HwReg_width_c_write : OUT STD_LOGIC;
        HwReg_height_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        HwReg_height_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        HwReg_height_c_full_n : IN STD_LOGIC;
        HwReg_height_c_write : OUT STD_LOGIC );
    end component;


    component bd_85a6_csc_0_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_out_vresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        stream_out_vresampled_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_vresampled_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        stream_out_vresampled_empty_n : IN STD_LOGIC;
        stream_out_vresampled_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        Height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        Height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        Height_empty_n : IN STD_LOGIC;
        Height_read : OUT STD_LOGIC;
        WidthOut_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        WidthOut_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthOut_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        WidthOut_empty_n : IN STD_LOGIC;
        WidthOut_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bd_85a6_csc_0_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w8_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w16_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w10_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w8_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w1_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w1_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w1_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w1_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w12_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_fifo_w24_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component bd_85a6_csc_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        InVideoFormat : OUT STD_LOGIC_VECTOR (7 downto 0);
        OutVideoFormat : OUT STD_LOGIC_VECTOR (7 downto 0);
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        ColStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        ColEnd : OUT STD_LOGIC_VECTOR (15 downto 0);
        RowStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        RowEnd : OUT STD_LOGIC_VECTOR (15 downto 0);
        K11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ROffset : OUT STD_LOGIC_VECTOR (9 downto 0);
        GOffset : OUT STD_LOGIC_VECTOR (9 downto 0);
        BOffset : OUT STD_LOGIC_VECTOR (9 downto 0);
        ClampMin : OUT STD_LOGIC_VECTOR (7 downto 0);
        ClipMax : OUT STD_LOGIC_VECTOR (7 downto 0);
        K11_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K12_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K13_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K21_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K22_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K23_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K31_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K32_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        K33_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ROffset_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        GOffset_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        BOffset_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ClampMin_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ClipMax_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component bd_85a6_csc_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        InVideoFormat => InVideoFormat,
        OutVideoFormat => OutVideoFormat,
        width => width,
        height => height,
        ColStart => ColStart,
        ColEnd => ColEnd,
        RowStart => RowStart,
        RowEnd => RowEnd,
        K11 => K11,
        K12 => K12,
        K13 => K13,
        K21 => K21,
        K22 => K22,
        K23 => K23,
        K31 => K31,
        K32 => K32,
        K33 => K33,
        ROffset => ROffset,
        GOffset => GOffset,
        BOffset => BOffset,
        ClampMin => ClampMin,
        ClipMax => ClipMax,
        K11_2 => K11_2,
        K12_2 => K12_2,
        K13_2 => K13_2,
        K21_2 => K21_2,
        K22_2 => K22_2,
        K23_2 => K23_2,
        K31_2 => K31_2,
        K32_2 => K32_2,
        K33_2 => K33_2,
        ROffset_2 => ROffset_2,
        GOffset_2 => GOffset_2,
        BOffset_2 => BOffset_2,
        ClampMin_2 => ClampMin_2,
        ClipMax_2 => ClipMax_2,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Block_entry3_proc_U0 : component bd_85a6_csc_0_Block_entry3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry3_proc_U0_ap_start,
        ap_done => Block_entry3_proc_U0_ap_done,
        ap_continue => Block_entry3_proc_U0_ap_continue,
        ap_idle => Block_entry3_proc_U0_ap_idle,
        ap_ready => Block_entry3_proc_U0_ap_ready,
        InVideoFormat => InVideoFormat,
        OutVideoFormat => OutVideoFormat,
        width => width,
        height => height,
        ColStart => ColStart,
        ColEnd => ColEnd,
        RowStart => RowStart,
        RowEnd => RowEnd,
        K11 => K11,
        K12 => K12,
        K13 => K13,
        K21 => K21,
        K22 => K22,
        K23 => K23,
        K31 => K31,
        K32 => K32,
        K33 => K33,
        ROffset => ROffset,
        GOffset => GOffset,
        BOffset => BOffset,
        ClampMin => ClampMin,
        ClipMax => ClipMax,
        K11_2 => K11_2,
        K12_2 => K12_2,
        K13_2 => K13_2,
        K21_2 => K21_2,
        K22_2 => K22_2,
        K23_2 => K23_2,
        K31_2 => K31_2,
        K32_2 => K32_2,
        K33_2 => K33_2,
        ROffset_2 => ROffset_2,
        GOffset_2 => GOffset_2,
        BOffset_2 => BOffset_2,
        ClampMin_2 => ClampMin_2,
        ClipMax_2 => ClipMax_2,
        ap_return_0 => Block_entry3_proc_U0_ap_return_0,
        ap_return_1 => Block_entry3_proc_U0_ap_return_1,
        ap_return_2 => Block_entry3_proc_U0_ap_return_2,
        ap_return_3 => Block_entry3_proc_U0_ap_return_3,
        ap_return_4 => Block_entry3_proc_U0_ap_return_4,
        ap_return_5 => Block_entry3_proc_U0_ap_return_5,
        ap_return_6 => Block_entry3_proc_U0_ap_return_6,
        ap_return_7 => Block_entry3_proc_U0_ap_return_7,
        ap_return_8 => Block_entry3_proc_U0_ap_return_8,
        ap_return_9 => Block_entry3_proc_U0_ap_return_9,
        ap_return_10 => Block_entry3_proc_U0_ap_return_10,
        ap_return_11 => Block_entry3_proc_U0_ap_return_11,
        ap_return_12 => Block_entry3_proc_U0_ap_return_12,
        ap_return_13 => Block_entry3_proc_U0_ap_return_13,
        ap_return_14 => Block_entry3_proc_U0_ap_return_14,
        ap_return_15 => Block_entry3_proc_U0_ap_return_15,
        ap_return_16 => Block_entry3_proc_U0_ap_return_16,
        ap_return_17 => Block_entry3_proc_U0_ap_return_17,
        ap_return_18 => Block_entry3_proc_U0_ap_return_18,
        ap_return_19 => Block_entry3_proc_U0_ap_return_19,
        ap_return_20 => Block_entry3_proc_U0_ap_return_20,
        ap_return_21 => Block_entry3_proc_U0_ap_return_21,
        ap_return_22 => Block_entry3_proc_U0_ap_return_22,
        ap_return_23 => Block_entry3_proc_U0_ap_return_23,
        ap_return_24 => Block_entry3_proc_U0_ap_return_24,
        ap_return_25 => Block_entry3_proc_U0_ap_return_25,
        ap_return_26 => Block_entry3_proc_U0_ap_return_26,
        ap_return_27 => Block_entry3_proc_U0_ap_return_27,
        ap_return_28 => Block_entry3_proc_U0_ap_return_28,
        ap_return_29 => Block_entry3_proc_U0_ap_return_29,
        ap_return_30 => Block_entry3_proc_U0_ap_return_30,
        ap_return_31 => Block_entry3_proc_U0_ap_return_31,
        ap_return_32 => Block_entry3_proc_U0_ap_return_32,
        ap_return_33 => Block_entry3_proc_U0_ap_return_33,
        ap_return_34 => Block_entry3_proc_U0_ap_return_34,
        ap_return_35 => Block_entry3_proc_U0_ap_return_35,
        ap_return_36 => Block_entry3_proc_U0_ap_return_36,
        ap_return_37 => Block_entry3_proc_U0_ap_return_37,
        ap_return_38 => Block_entry3_proc_U0_ap_return_38,
        ap_return_39 => Block_entry3_proc_U0_ap_return_39);

    AXIvideo2MultiPixStream_U0 : component bd_85a6_csc_0_AXIvideo2MultiPixStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2MultiPixStream_U0_ap_start,
        ap_done => AXIvideo2MultiPixStream_U0_ap_done,
        ap_continue => AXIvideo2MultiPixStream_U0_ap_continue,
        ap_idle => AXIvideo2MultiPixStream_U0_ap_idle,
        ap_ready => AXIvideo2MultiPixStream_U0_ap_ready,
        s_axis_video_TDATA => s_axis_video_TDATA,
        s_axis_video_TVALID => s_axis_video_TVALID,
        s_axis_video_TREADY => AXIvideo2MultiPixStream_U0_s_axis_video_TREADY,
        s_axis_video_TKEEP => s_axis_video_TKEEP,
        s_axis_video_TSTRB => s_axis_video_TSTRB,
        s_axis_video_TUSER => s_axis_video_TUSER,
        s_axis_video_TLAST => s_axis_video_TLAST,
        s_axis_video_TID => s_axis_video_TID,
        s_axis_video_TDEST => s_axis_video_TDEST,
        stream_in_din => AXIvideo2MultiPixStream_U0_stream_in_din,
        stream_in_num_data_valid => stream_in_num_data_valid,
        stream_in_fifo_cap => stream_in_fifo_cap,
        stream_in_full_n => stream_in_full_n,
        stream_in_write => AXIvideo2MultiPixStream_U0_stream_in_write,
        p_read => HwReg_height_c30_channel_dout,
        p_read1 => HwReg_width_c24_channel_dout,
        p_read2 => HwReg_InVideoFormat_channel_dout,
        HwReg_width_c23_din => AXIvideo2MultiPixStream_U0_HwReg_width_c23_din,
        HwReg_width_c23_num_data_valid => HwReg_width_c23_num_data_valid,
        HwReg_width_c23_fifo_cap => HwReg_width_c23_fifo_cap,
        HwReg_width_c23_full_n => HwReg_width_c23_full_n,
        HwReg_width_c23_write => AXIvideo2MultiPixStream_U0_HwReg_width_c23_write,
        HwReg_height_c29_din => AXIvideo2MultiPixStream_U0_HwReg_height_c29_din,
        HwReg_height_c29_num_data_valid => HwReg_height_c29_num_data_valid,
        HwReg_height_c29_fifo_cap => HwReg_height_c29_fifo_cap,
        HwReg_height_c29_full_n => HwReg_height_c29_full_n,
        HwReg_height_c29_write => AXIvideo2MultiPixStream_U0_HwReg_height_c29_write);

    v_vcresampler_core_1_U0 : component bd_85a6_csc_0_v_vcresampler_core_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_vcresampler_core_1_U0_ap_start,
        ap_done => v_vcresampler_core_1_U0_ap_done,
        ap_continue => v_vcresampler_core_1_U0_ap_continue,
        ap_idle => v_vcresampler_core_1_U0_ap_idle,
        ap_ready => v_vcresampler_core_1_U0_ap_ready,
        stream_in_dout => stream_in_dout,
        stream_in_num_data_valid => stream_in_num_data_valid,
        stream_in_fifo_cap => stream_in_fifo_cap,
        stream_in_empty_n => stream_in_empty_n,
        stream_in_read => v_vcresampler_core_1_U0_stream_in_read,
        HwReg_height_dout => HwReg_height_c29_dout,
        HwReg_height_num_data_valid => HwReg_height_c29_num_data_valid,
        HwReg_height_fifo_cap => HwReg_height_c29_fifo_cap,
        HwReg_height_empty_n => HwReg_height_c29_empty_n,
        HwReg_height_read => v_vcresampler_core_1_U0_HwReg_height_read,
        HwReg_width_dout => HwReg_width_c23_dout,
        HwReg_width_num_data_valid => HwReg_width_c23_num_data_valid,
        HwReg_width_fifo_cap => HwReg_width_c23_fifo_cap,
        HwReg_width_empty_n => HwReg_width_c23_empty_n,
        HwReg_width_read => v_vcresampler_core_1_U0_HwReg_width_read,
        p_read => bPassThru_420_In_loc_channel_dout,
        stream_in_vresampled_din => v_vcresampler_core_1_U0_stream_in_vresampled_din,
        stream_in_vresampled_num_data_valid => stream_in_vresampled_num_data_valid,
        stream_in_vresampled_fifo_cap => stream_in_vresampled_fifo_cap,
        stream_in_vresampled_full_n => stream_in_vresampled_full_n,
        stream_in_vresampled_write => v_vcresampler_core_1_U0_stream_in_vresampled_write,
        HwReg_width_c22_din => v_vcresampler_core_1_U0_HwReg_width_c22_din,
        HwReg_width_c22_num_data_valid => HwReg_width_c22_num_data_valid,
        HwReg_width_c22_fifo_cap => HwReg_width_c22_fifo_cap,
        HwReg_width_c22_full_n => HwReg_width_c22_full_n,
        HwReg_width_c22_write => v_vcresampler_core_1_U0_HwReg_width_c22_write,
        HwReg_height_c28_din => v_vcresampler_core_1_U0_HwReg_height_c28_din,
        HwReg_height_c28_num_data_valid => HwReg_height_c28_num_data_valid,
        HwReg_height_c28_fifo_cap => HwReg_height_c28_fifo_cap,
        HwReg_height_c28_full_n => HwReg_height_c28_full_n,
        HwReg_height_c28_write => v_vcresampler_core_1_U0_HwReg_height_c28_write);

    v_hcresampler_core_2_U0 : component bd_85a6_csc_0_v_hcresampler_core_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_hcresampler_core_2_U0_ap_start,
        ap_done => v_hcresampler_core_2_U0_ap_done,
        ap_continue => v_hcresampler_core_2_U0_ap_continue,
        ap_idle => v_hcresampler_core_2_U0_ap_idle,
        ap_ready => v_hcresampler_core_2_U0_ap_ready,
        stream_in_vresampled_dout => stream_in_vresampled_dout,
        stream_in_vresampled_num_data_valid => stream_in_vresampled_num_data_valid,
        stream_in_vresampled_fifo_cap => stream_in_vresampled_fifo_cap,
        stream_in_vresampled_empty_n => stream_in_vresampled_empty_n,
        stream_in_vresampled_read => v_hcresampler_core_2_U0_stream_in_vresampled_read,
        HwReg_height_dout => HwReg_height_c28_dout,
        HwReg_height_num_data_valid => HwReg_height_c28_num_data_valid,
        HwReg_height_fifo_cap => HwReg_height_c28_fifo_cap,
        HwReg_height_empty_n => HwReg_height_c28_empty_n,
        HwReg_height_read => v_hcresampler_core_2_U0_HwReg_height_read,
        HwReg_width_dout => HwReg_width_c22_dout,
        HwReg_width_num_data_valid => HwReg_width_c22_num_data_valid,
        HwReg_width_fifo_cap => HwReg_width_c22_fifo_cap,
        HwReg_width_empty_n => HwReg_width_c22_empty_n,
        HwReg_width_read => v_hcresampler_core_2_U0_HwReg_width_read,
        p_read => bPassThru_422_or_420_In_loc_channel_dout,
        stream_in_hresampled_din => v_hcresampler_core_2_U0_stream_in_hresampled_din,
        stream_in_hresampled_num_data_valid => stream_in_hresampled_num_data_valid,
        stream_in_hresampled_fifo_cap => stream_in_hresampled_fifo_cap,
        stream_in_hresampled_full_n => stream_in_hresampled_full_n,
        stream_in_hresampled_write => v_hcresampler_core_2_U0_stream_in_hresampled_write,
        HwReg_width_c21_din => v_hcresampler_core_2_U0_HwReg_width_c21_din,
        HwReg_width_c21_num_data_valid => HwReg_width_c21_num_data_valid,
        HwReg_width_c21_fifo_cap => HwReg_width_c21_fifo_cap,
        HwReg_width_c21_full_n => HwReg_width_c21_full_n,
        HwReg_width_c21_write => v_hcresampler_core_2_U0_HwReg_width_c21_write,
        HwReg_height_c27_din => v_hcresampler_core_2_U0_HwReg_height_c27_din,
        HwReg_height_c27_num_data_valid => HwReg_height_c27_num_data_valid,
        HwReg_height_c27_fifo_cap => HwReg_height_c27_fifo_cap,
        HwReg_height_c27_full_n => HwReg_height_c27_full_n,
        HwReg_height_c27_write => v_hcresampler_core_2_U0_HwReg_height_c27_write);

    v_csc_core_U0 : component bd_85a6_csc_0_v_csc_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_csc_core_U0_ap_start,
        ap_done => v_csc_core_U0_ap_done,
        ap_continue => v_csc_core_U0_ap_continue,
        ap_idle => v_csc_core_U0_ap_idle,
        ap_ready => v_csc_core_U0_ap_ready,
        stream_in_hresampled_dout => stream_in_hresampled_dout,
        stream_in_hresampled_num_data_valid => stream_in_hresampled_num_data_valid,
        stream_in_hresampled_fifo_cap => stream_in_hresampled_fifo_cap,
        stream_in_hresampled_empty_n => stream_in_hresampled_empty_n,
        stream_in_hresampled_read => v_csc_core_U0_stream_in_hresampled_read,
        height_dout => HwReg_height_c27_dout,
        height_num_data_valid => HwReg_height_c27_num_data_valid,
        height_fifo_cap => HwReg_height_c27_fifo_cap,
        height_empty_n => HwReg_height_c27_empty_n,
        height_read => v_csc_core_U0_height_read,
        width_dout => HwReg_width_c21_dout,
        width_num_data_valid => HwReg_width_c21_num_data_valid,
        width_fifo_cap => HwReg_width_c21_fifo_cap,
        width_empty_n => HwReg_width_c21_empty_n,
        width_read => v_csc_core_U0_width_read,
        ColStart_read => HwReg_ColStart_channel_dout,
        ColEnd_read => HwReg_ColEnd_channel_dout,
        RowStart_read => HwReg_RowStart_channel_dout,
        RowEnd_read => HwReg_RowEnd_channel_dout,
        K11_read => HwReg_K11_channel_dout,
        K12_read => HwReg_K12_channel_dout,
        K13_read => HwReg_K13_channel_dout,
        K21_read => HwReg_K21_channel_dout,
        K22_read => HwReg_K22_channel_dout,
        K23_read => HwReg_K23_channel_dout,
        K31_read => HwReg_K31_channel_dout,
        K32_read => HwReg_K32_channel_dout,
        K33_read => HwReg_K33_channel_dout,
        ROffset_read => HwReg_ROffset_channel_dout,
        GOffset_read => HwReg_GOffset_channel_dout,
        BOffset_read => HwReg_BOffset_channel_dout,
        ClampMin_read => HwReg_ClampMin_channel_dout,
        ClipMax_read => HwReg_ClipMax_channel_dout,
        K11_2_read => HwReg_K11_2_channel_dout,
        K12_2_read => HwReg_K12_2_channel_dout,
        K13_2_read => HwReg_K13_2_channel_dout,
        K21_2_read => HwReg_K21_2_channel_dout,
        K22_2_read => HwReg_K22_2_channel_dout,
        K23_2_read => HwReg_K23_2_channel_dout,
        K31_2_read => HwReg_K31_2_channel_dout,
        K32_2_read => HwReg_K32_2_channel_dout,
        K33_2_read => HwReg_K33_2_channel_dout,
        ROffset_2_read => HwReg_ROffset_2_channel_dout,
        GOffset_2_read => HwReg_GOffset_2_channel_dout,
        BOffset_2_read => HwReg_BOffset_2_channel_dout,
        ClampMin_2_read => HwReg_ClampMin_2_channel_dout,
        ClipMax_2_read => HwReg_ClipMax_2_channel_dout,
        stream_csc_din => v_csc_core_U0_stream_csc_din,
        stream_csc_num_data_valid => stream_csc_num_data_valid,
        stream_csc_fifo_cap => stream_csc_fifo_cap,
        stream_csc_full_n => stream_csc_full_n,
        stream_csc_write => v_csc_core_U0_stream_csc_write,
        HwReg_width_c20_din => v_csc_core_U0_HwReg_width_c20_din,
        HwReg_width_c20_num_data_valid => HwReg_width_c20_num_data_valid,
        HwReg_width_c20_fifo_cap => HwReg_width_c20_fifo_cap,
        HwReg_width_c20_full_n => HwReg_width_c20_full_n,
        HwReg_width_c20_write => v_csc_core_U0_HwReg_width_c20_write,
        HwReg_height_c26_din => v_csc_core_U0_HwReg_height_c26_din,
        HwReg_height_c26_num_data_valid => HwReg_height_c26_num_data_valid,
        HwReg_height_c26_fifo_cap => HwReg_height_c26_fifo_cap,
        HwReg_height_c26_full_n => HwReg_height_c26_full_n,
        HwReg_height_c26_write => v_csc_core_U0_HwReg_height_c26_write);

    v_hcresampler_core_U0 : component bd_85a6_csc_0_v_hcresampler_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_hcresampler_core_U0_ap_start,
        ap_done => v_hcresampler_core_U0_ap_done,
        ap_continue => v_hcresampler_core_U0_ap_continue,
        ap_idle => v_hcresampler_core_U0_ap_idle,
        ap_ready => v_hcresampler_core_U0_ap_ready,
        stream_csc_dout => stream_csc_dout,
        stream_csc_num_data_valid => stream_csc_num_data_valid,
        stream_csc_fifo_cap => stream_csc_fifo_cap,
        stream_csc_empty_n => stream_csc_empty_n,
        stream_csc_read => v_hcresampler_core_U0_stream_csc_read,
        HwReg_height_dout => HwReg_height_c26_dout,
        HwReg_height_num_data_valid => HwReg_height_c26_num_data_valid,
        HwReg_height_fifo_cap => HwReg_height_c26_fifo_cap,
        HwReg_height_empty_n => HwReg_height_c26_empty_n,
        HwReg_height_read => v_hcresampler_core_U0_HwReg_height_read,
        HwReg_width_dout => HwReg_width_c20_dout,
        HwReg_width_num_data_valid => HwReg_width_c20_num_data_valid,
        HwReg_width_fifo_cap => HwReg_width_c20_fifo_cap,
        HwReg_width_empty_n => HwReg_width_c20_empty_n,
        HwReg_width_read => v_hcresampler_core_U0_HwReg_width_read,
        p_read => bPassThru_422_or_420_Out_loc_channel_dout,
        stream_out_hresampled_din => v_hcresampler_core_U0_stream_out_hresampled_din,
        stream_out_hresampled_num_data_valid => stream_out_hresampled_num_data_valid,
        stream_out_hresampled_fifo_cap => stream_out_hresampled_fifo_cap,
        stream_out_hresampled_full_n => stream_out_hresampled_full_n,
        stream_out_hresampled_write => v_hcresampler_core_U0_stream_out_hresampled_write,
        HwReg_width_c19_din => v_hcresampler_core_U0_HwReg_width_c19_din,
        HwReg_width_c19_num_data_valid => HwReg_width_c19_num_data_valid,
        HwReg_width_c19_fifo_cap => HwReg_width_c19_fifo_cap,
        HwReg_width_c19_full_n => HwReg_width_c19_full_n,
        HwReg_width_c19_write => v_hcresampler_core_U0_HwReg_width_c19_write,
        HwReg_height_c25_din => v_hcresampler_core_U0_HwReg_height_c25_din,
        HwReg_height_c25_num_data_valid => HwReg_height_c25_num_data_valid,
        HwReg_height_c25_fifo_cap => HwReg_height_c25_fifo_cap,
        HwReg_height_c25_full_n => HwReg_height_c25_full_n,
        HwReg_height_c25_write => v_hcresampler_core_U0_HwReg_height_c25_write);

    v_vcresampler_core_U0 : component bd_85a6_csc_0_v_vcresampler_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => v_vcresampler_core_U0_ap_start,
        ap_done => v_vcresampler_core_U0_ap_done,
        ap_continue => v_vcresampler_core_U0_ap_continue,
        ap_idle => v_vcresampler_core_U0_ap_idle,
        ap_ready => v_vcresampler_core_U0_ap_ready,
        stream_out_hresampled_dout => stream_out_hresampled_dout,
        stream_out_hresampled_num_data_valid => stream_out_hresampled_num_data_valid,
        stream_out_hresampled_fifo_cap => stream_out_hresampled_fifo_cap,
        stream_out_hresampled_empty_n => stream_out_hresampled_empty_n,
        stream_out_hresampled_read => v_vcresampler_core_U0_stream_out_hresampled_read,
        HwReg_height_dout => HwReg_height_c25_dout,
        HwReg_height_num_data_valid => HwReg_height_c25_num_data_valid,
        HwReg_height_fifo_cap => HwReg_height_c25_fifo_cap,
        HwReg_height_empty_n => HwReg_height_c25_empty_n,
        HwReg_height_read => v_vcresampler_core_U0_HwReg_height_read,
        HwReg_width_dout => HwReg_width_c19_dout,
        HwReg_width_num_data_valid => HwReg_width_c19_num_data_valid,
        HwReg_width_fifo_cap => HwReg_width_c19_fifo_cap,
        HwReg_width_empty_n => HwReg_width_c19_empty_n,
        HwReg_width_read => v_vcresampler_core_U0_HwReg_width_read,
        p_read => bPassThru_420_Out_loc_channel_dout,
        stream_out_vresampled_din => v_vcresampler_core_U0_stream_out_vresampled_din,
        stream_out_vresampled_num_data_valid => stream_out_vresampled_num_data_valid,
        stream_out_vresampled_fifo_cap => stream_out_vresampled_fifo_cap,
        stream_out_vresampled_full_n => stream_out_vresampled_full_n,
        stream_out_vresampled_write => v_vcresampler_core_U0_stream_out_vresampled_write,
        HwReg_width_c_din => v_vcresampler_core_U0_HwReg_width_c_din,
        HwReg_width_c_num_data_valid => HwReg_width_c_num_data_valid,
        HwReg_width_c_fifo_cap => HwReg_width_c_fifo_cap,
        HwReg_width_c_full_n => HwReg_width_c_full_n,
        HwReg_width_c_write => v_vcresampler_core_U0_HwReg_width_c_write,
        HwReg_height_c_din => v_vcresampler_core_U0_HwReg_height_c_din,
        HwReg_height_c_num_data_valid => HwReg_height_c_num_data_valid,
        HwReg_height_c_fifo_cap => HwReg_height_c_fifo_cap,
        HwReg_height_c_full_n => HwReg_height_c_full_n,
        HwReg_height_c_write => v_vcresampler_core_U0_HwReg_height_c_write);

    MultiPixStream2AXIvideo_U0 : component bd_85a6_csc_0_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        stream_out_vresampled_dout => stream_out_vresampled_dout,
        stream_out_vresampled_num_data_valid => stream_out_vresampled_num_data_valid,
        stream_out_vresampled_fifo_cap => stream_out_vresampled_fifo_cap,
        stream_out_vresampled_empty_n => stream_out_vresampled_empty_n,
        stream_out_vresampled_read => MultiPixStream2AXIvideo_U0_stream_out_vresampled_read,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST,
        Height_dout => HwReg_height_c_dout,
        Height_num_data_valid => HwReg_height_c_num_data_valid,
        Height_fifo_cap => HwReg_height_c_fifo_cap,
        Height_empty_n => HwReg_height_c_empty_n,
        Height_read => MultiPixStream2AXIvideo_U0_Height_read,
        WidthOut_dout => HwReg_width_c_dout,
        WidthOut_num_data_valid => HwReg_width_c_num_data_valid,
        WidthOut_fifo_cap => HwReg_width_c_fifo_cap,
        WidthOut_empty_n => HwReg_width_c_empty_n,
        WidthOut_read => MultiPixStream2AXIvideo_U0_WidthOut_read,
        p_read => HwReg_OutVideoFormat_channel_dout);

    HwReg_InVideoFormat_channel_U : component bd_85a6_csc_0_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_0,
        if_full_n => HwReg_InVideoFormat_channel_full_n,
        if_write => ap_channel_done_HwReg_InVideoFormat_channel,
        if_dout => HwReg_InVideoFormat_channel_dout,
        if_num_data_valid => HwReg_InVideoFormat_channel_num_data_valid,
        if_fifo_cap => HwReg_InVideoFormat_channel_fifo_cap,
        if_empty_n => HwReg_InVideoFormat_channel_empty_n,
        if_read => AXIvideo2MultiPixStream_U0_ap_ready);

    HwReg_OutVideoFormat_channel_U : component bd_85a6_csc_0_fifo_w8_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_1,
        if_full_n => HwReg_OutVideoFormat_channel_full_n,
        if_write => ap_channel_done_HwReg_OutVideoFormat_channel,
        if_dout => HwReg_OutVideoFormat_channel_dout,
        if_num_data_valid => HwReg_OutVideoFormat_channel_num_data_valid,
        if_fifo_cap => HwReg_OutVideoFormat_channel_fifo_cap,
        if_empty_n => HwReg_OutVideoFormat_channel_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);

    HwReg_ColStart_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_2,
        if_full_n => HwReg_ColStart_channel_full_n,
        if_write => ap_channel_done_HwReg_ColStart_channel,
        if_dout => HwReg_ColStart_channel_dout,
        if_num_data_valid => HwReg_ColStart_channel_num_data_valid,
        if_fifo_cap => HwReg_ColStart_channel_fifo_cap,
        if_empty_n => HwReg_ColStart_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ColEnd_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_3,
        if_full_n => HwReg_ColEnd_channel_full_n,
        if_write => ap_channel_done_HwReg_ColEnd_channel,
        if_dout => HwReg_ColEnd_channel_dout,
        if_num_data_valid => HwReg_ColEnd_channel_num_data_valid,
        if_fifo_cap => HwReg_ColEnd_channel_fifo_cap,
        if_empty_n => HwReg_ColEnd_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_RowStart_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_4,
        if_full_n => HwReg_RowStart_channel_full_n,
        if_write => ap_channel_done_HwReg_RowStart_channel,
        if_dout => HwReg_RowStart_channel_dout,
        if_num_data_valid => HwReg_RowStart_channel_num_data_valid,
        if_fifo_cap => HwReg_RowStart_channel_fifo_cap,
        if_empty_n => HwReg_RowStart_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_RowEnd_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_5,
        if_full_n => HwReg_RowEnd_channel_full_n,
        if_write => ap_channel_done_HwReg_RowEnd_channel,
        if_dout => HwReg_RowEnd_channel_dout,
        if_num_data_valid => HwReg_RowEnd_channel_num_data_valid,
        if_fifo_cap => HwReg_RowEnd_channel_fifo_cap,
        if_empty_n => HwReg_RowEnd_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K11_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_6,
        if_full_n => HwReg_K11_channel_full_n,
        if_write => ap_channel_done_HwReg_K11_channel,
        if_dout => HwReg_K11_channel_dout,
        if_num_data_valid => HwReg_K11_channel_num_data_valid,
        if_fifo_cap => HwReg_K11_channel_fifo_cap,
        if_empty_n => HwReg_K11_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K12_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_7,
        if_full_n => HwReg_K12_channel_full_n,
        if_write => ap_channel_done_HwReg_K12_channel,
        if_dout => HwReg_K12_channel_dout,
        if_num_data_valid => HwReg_K12_channel_num_data_valid,
        if_fifo_cap => HwReg_K12_channel_fifo_cap,
        if_empty_n => HwReg_K12_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K13_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_8,
        if_full_n => HwReg_K13_channel_full_n,
        if_write => ap_channel_done_HwReg_K13_channel,
        if_dout => HwReg_K13_channel_dout,
        if_num_data_valid => HwReg_K13_channel_num_data_valid,
        if_fifo_cap => HwReg_K13_channel_fifo_cap,
        if_empty_n => HwReg_K13_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K21_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_9,
        if_full_n => HwReg_K21_channel_full_n,
        if_write => ap_channel_done_HwReg_K21_channel,
        if_dout => HwReg_K21_channel_dout,
        if_num_data_valid => HwReg_K21_channel_num_data_valid,
        if_fifo_cap => HwReg_K21_channel_fifo_cap,
        if_empty_n => HwReg_K21_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K22_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_10,
        if_full_n => HwReg_K22_channel_full_n,
        if_write => ap_channel_done_HwReg_K22_channel,
        if_dout => HwReg_K22_channel_dout,
        if_num_data_valid => HwReg_K22_channel_num_data_valid,
        if_fifo_cap => HwReg_K22_channel_fifo_cap,
        if_empty_n => HwReg_K22_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K23_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_11,
        if_full_n => HwReg_K23_channel_full_n,
        if_write => ap_channel_done_HwReg_K23_channel,
        if_dout => HwReg_K23_channel_dout,
        if_num_data_valid => HwReg_K23_channel_num_data_valid,
        if_fifo_cap => HwReg_K23_channel_fifo_cap,
        if_empty_n => HwReg_K23_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K31_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_12,
        if_full_n => HwReg_K31_channel_full_n,
        if_write => ap_channel_done_HwReg_K31_channel,
        if_dout => HwReg_K31_channel_dout,
        if_num_data_valid => HwReg_K31_channel_num_data_valid,
        if_fifo_cap => HwReg_K31_channel_fifo_cap,
        if_empty_n => HwReg_K31_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K32_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_13,
        if_full_n => HwReg_K32_channel_full_n,
        if_write => ap_channel_done_HwReg_K32_channel,
        if_dout => HwReg_K32_channel_dout,
        if_num_data_valid => HwReg_K32_channel_num_data_valid,
        if_fifo_cap => HwReg_K32_channel_fifo_cap,
        if_empty_n => HwReg_K32_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K33_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_14,
        if_full_n => HwReg_K33_channel_full_n,
        if_write => ap_channel_done_HwReg_K33_channel,
        if_dout => HwReg_K33_channel_dout,
        if_num_data_valid => HwReg_K33_channel_num_data_valid,
        if_fifo_cap => HwReg_K33_channel_fifo_cap,
        if_empty_n => HwReg_K33_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ROffset_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_15,
        if_full_n => HwReg_ROffset_channel_full_n,
        if_write => ap_channel_done_HwReg_ROffset_channel,
        if_dout => HwReg_ROffset_channel_dout,
        if_num_data_valid => HwReg_ROffset_channel_num_data_valid,
        if_fifo_cap => HwReg_ROffset_channel_fifo_cap,
        if_empty_n => HwReg_ROffset_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_GOffset_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_16,
        if_full_n => HwReg_GOffset_channel_full_n,
        if_write => ap_channel_done_HwReg_GOffset_channel,
        if_dout => HwReg_GOffset_channel_dout,
        if_num_data_valid => HwReg_GOffset_channel_num_data_valid,
        if_fifo_cap => HwReg_GOffset_channel_fifo_cap,
        if_empty_n => HwReg_GOffset_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_BOffset_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_17,
        if_full_n => HwReg_BOffset_channel_full_n,
        if_write => ap_channel_done_HwReg_BOffset_channel,
        if_dout => HwReg_BOffset_channel_dout,
        if_num_data_valid => HwReg_BOffset_channel_num_data_valid,
        if_fifo_cap => HwReg_BOffset_channel_fifo_cap,
        if_empty_n => HwReg_BOffset_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ClampMin_channel_U : component bd_85a6_csc_0_fifo_w8_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_18,
        if_full_n => HwReg_ClampMin_channel_full_n,
        if_write => ap_channel_done_HwReg_ClampMin_channel,
        if_dout => HwReg_ClampMin_channel_dout,
        if_num_data_valid => HwReg_ClampMin_channel_num_data_valid,
        if_fifo_cap => HwReg_ClampMin_channel_fifo_cap,
        if_empty_n => HwReg_ClampMin_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ClipMax_channel_U : component bd_85a6_csc_0_fifo_w8_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_19,
        if_full_n => HwReg_ClipMax_channel_full_n,
        if_write => ap_channel_done_HwReg_ClipMax_channel,
        if_dout => HwReg_ClipMax_channel_dout,
        if_num_data_valid => HwReg_ClipMax_channel_num_data_valid,
        if_fifo_cap => HwReg_ClipMax_channel_fifo_cap,
        if_empty_n => HwReg_ClipMax_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K11_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_20,
        if_full_n => HwReg_K11_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K11_2_channel,
        if_dout => HwReg_K11_2_channel_dout,
        if_num_data_valid => HwReg_K11_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K11_2_channel_fifo_cap,
        if_empty_n => HwReg_K11_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K12_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_21,
        if_full_n => HwReg_K12_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K12_2_channel,
        if_dout => HwReg_K12_2_channel_dout,
        if_num_data_valid => HwReg_K12_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K12_2_channel_fifo_cap,
        if_empty_n => HwReg_K12_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K13_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_22,
        if_full_n => HwReg_K13_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K13_2_channel,
        if_dout => HwReg_K13_2_channel_dout,
        if_num_data_valid => HwReg_K13_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K13_2_channel_fifo_cap,
        if_empty_n => HwReg_K13_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K21_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_23,
        if_full_n => HwReg_K21_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K21_2_channel,
        if_dout => HwReg_K21_2_channel_dout,
        if_num_data_valid => HwReg_K21_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K21_2_channel_fifo_cap,
        if_empty_n => HwReg_K21_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K22_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_24,
        if_full_n => HwReg_K22_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K22_2_channel,
        if_dout => HwReg_K22_2_channel_dout,
        if_num_data_valid => HwReg_K22_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K22_2_channel_fifo_cap,
        if_empty_n => HwReg_K22_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K23_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_25,
        if_full_n => HwReg_K23_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K23_2_channel,
        if_dout => HwReg_K23_2_channel_dout,
        if_num_data_valid => HwReg_K23_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K23_2_channel_fifo_cap,
        if_empty_n => HwReg_K23_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K31_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_26,
        if_full_n => HwReg_K31_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K31_2_channel,
        if_dout => HwReg_K31_2_channel_dout,
        if_num_data_valid => HwReg_K31_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K31_2_channel_fifo_cap,
        if_empty_n => HwReg_K31_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K32_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_27,
        if_full_n => HwReg_K32_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K32_2_channel,
        if_dout => HwReg_K32_2_channel_dout,
        if_num_data_valid => HwReg_K32_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K32_2_channel_fifo_cap,
        if_empty_n => HwReg_K32_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_K33_2_channel_U : component bd_85a6_csc_0_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_28,
        if_full_n => HwReg_K33_2_channel_full_n,
        if_write => ap_channel_done_HwReg_K33_2_channel,
        if_dout => HwReg_K33_2_channel_dout,
        if_num_data_valid => HwReg_K33_2_channel_num_data_valid,
        if_fifo_cap => HwReg_K33_2_channel_fifo_cap,
        if_empty_n => HwReg_K33_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ROffset_2_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_29,
        if_full_n => HwReg_ROffset_2_channel_full_n,
        if_write => ap_channel_done_HwReg_ROffset_2_channel,
        if_dout => HwReg_ROffset_2_channel_dout,
        if_num_data_valid => HwReg_ROffset_2_channel_num_data_valid,
        if_fifo_cap => HwReg_ROffset_2_channel_fifo_cap,
        if_empty_n => HwReg_ROffset_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_GOffset_2_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_30,
        if_full_n => HwReg_GOffset_2_channel_full_n,
        if_write => ap_channel_done_HwReg_GOffset_2_channel,
        if_dout => HwReg_GOffset_2_channel_dout,
        if_num_data_valid => HwReg_GOffset_2_channel_num_data_valid,
        if_fifo_cap => HwReg_GOffset_2_channel_fifo_cap,
        if_empty_n => HwReg_GOffset_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_BOffset_2_channel_U : component bd_85a6_csc_0_fifo_w10_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_31,
        if_full_n => HwReg_BOffset_2_channel_full_n,
        if_write => ap_channel_done_HwReg_BOffset_2_channel,
        if_dout => HwReg_BOffset_2_channel_dout,
        if_num_data_valid => HwReg_BOffset_2_channel_num_data_valid,
        if_fifo_cap => HwReg_BOffset_2_channel_fifo_cap,
        if_empty_n => HwReg_BOffset_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ClampMin_2_channel_U : component bd_85a6_csc_0_fifo_w8_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_32,
        if_full_n => HwReg_ClampMin_2_channel_full_n,
        if_write => ap_channel_done_HwReg_ClampMin_2_channel,
        if_dout => HwReg_ClampMin_2_channel_dout,
        if_num_data_valid => HwReg_ClampMin_2_channel_num_data_valid,
        if_fifo_cap => HwReg_ClampMin_2_channel_fifo_cap,
        if_empty_n => HwReg_ClampMin_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    HwReg_ClipMax_2_channel_U : component bd_85a6_csc_0_fifo_w8_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_33,
        if_full_n => HwReg_ClipMax_2_channel_full_n,
        if_write => ap_channel_done_HwReg_ClipMax_2_channel,
        if_dout => HwReg_ClipMax_2_channel_dout,
        if_num_data_valid => HwReg_ClipMax_2_channel_num_data_valid,
        if_fifo_cap => HwReg_ClipMax_2_channel_fifo_cap,
        if_empty_n => HwReg_ClipMax_2_channel_empty_n,
        if_read => v_csc_core_U0_ap_ready);

    bPassThru_420_In_loc_channel_U : component bd_85a6_csc_0_fifo_w1_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_34,
        if_full_n => bPassThru_420_In_loc_channel_full_n,
        if_write => ap_channel_done_bPassThru_420_In_loc_channel,
        if_dout => bPassThru_420_In_loc_channel_dout,
        if_num_data_valid => bPassThru_420_In_loc_channel_num_data_valid,
        if_fifo_cap => bPassThru_420_In_loc_channel_fifo_cap,
        if_empty_n => bPassThru_420_In_loc_channel_empty_n,
        if_read => v_vcresampler_core_1_U0_ap_ready);

    bPassThru_420_Out_loc_channel_U : component bd_85a6_csc_0_fifo_w1_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_35,
        if_full_n => bPassThru_420_Out_loc_channel_full_n,
        if_write => ap_channel_done_bPassThru_420_Out_loc_channel,
        if_dout => bPassThru_420_Out_loc_channel_dout,
        if_num_data_valid => bPassThru_420_Out_loc_channel_num_data_valid,
        if_fifo_cap => bPassThru_420_Out_loc_channel_fifo_cap,
        if_empty_n => bPassThru_420_Out_loc_channel_empty_n,
        if_read => v_vcresampler_core_U0_ap_ready);

    bPassThru_422_or_420_In_loc_channel_U : component bd_85a6_csc_0_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_36,
        if_full_n => bPassThru_422_or_420_In_loc_channel_full_n,
        if_write => ap_channel_done_bPassThru_422_or_420_In_loc_channel,
        if_dout => bPassThru_422_or_420_In_loc_channel_dout,
        if_num_data_valid => bPassThru_422_or_420_In_loc_channel_num_data_valid,
        if_fifo_cap => bPassThru_422_or_420_In_loc_channel_fifo_cap,
        if_empty_n => bPassThru_422_or_420_In_loc_channel_empty_n,
        if_read => v_hcresampler_core_2_U0_ap_ready);

    bPassThru_422_or_420_Out_loc_channel_U : component bd_85a6_csc_0_fifo_w1_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_37,
        if_full_n => bPassThru_422_or_420_Out_loc_channel_full_n,
        if_write => ap_channel_done_bPassThru_422_or_420_Out_loc_channel,
        if_dout => bPassThru_422_or_420_Out_loc_channel_dout,
        if_num_data_valid => bPassThru_422_or_420_Out_loc_channel_num_data_valid,
        if_fifo_cap => bPassThru_422_or_420_Out_loc_channel_fifo_cap,
        if_empty_n => bPassThru_422_or_420_Out_loc_channel_empty_n,
        if_read => v_hcresampler_core_U0_ap_ready);

    HwReg_width_c24_channel_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_38,
        if_full_n => HwReg_width_c24_channel_full_n,
        if_write => ap_channel_done_HwReg_width_c24_channel,
        if_dout => HwReg_width_c24_channel_dout,
        if_num_data_valid => HwReg_width_c24_channel_num_data_valid,
        if_fifo_cap => HwReg_width_c24_channel_fifo_cap,
        if_empty_n => HwReg_width_c24_channel_empty_n,
        if_read => AXIvideo2MultiPixStream_U0_ap_ready);

    HwReg_height_c30_channel_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry3_proc_U0_ap_return_39,
        if_full_n => HwReg_height_c30_channel_full_n,
        if_write => ap_channel_done_HwReg_height_c30_channel,
        if_dout => HwReg_height_c30_channel_dout,
        if_num_data_valid => HwReg_height_c30_channel_num_data_valid,
        if_fifo_cap => HwReg_height_c30_channel_fifo_cap,
        if_empty_n => HwReg_height_c30_channel_empty_n,
        if_read => AXIvideo2MultiPixStream_U0_ap_ready);

    stream_in_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2MultiPixStream_U0_stream_in_din,
        if_full_n => stream_in_full_n,
        if_write => AXIvideo2MultiPixStream_U0_stream_in_write,
        if_dout => stream_in_dout,
        if_num_data_valid => stream_in_num_data_valid,
        if_fifo_cap => stream_in_fifo_cap,
        if_empty_n => stream_in_empty_n,
        if_read => v_vcresampler_core_1_U0_stream_in_read);

    HwReg_width_c23_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2MultiPixStream_U0_HwReg_width_c23_din,
        if_full_n => HwReg_width_c23_full_n,
        if_write => AXIvideo2MultiPixStream_U0_HwReg_width_c23_write,
        if_dout => HwReg_width_c23_dout,
        if_num_data_valid => HwReg_width_c23_num_data_valid,
        if_fifo_cap => HwReg_width_c23_fifo_cap,
        if_empty_n => HwReg_width_c23_empty_n,
        if_read => v_vcresampler_core_1_U0_HwReg_width_read);

    HwReg_height_c29_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2MultiPixStream_U0_HwReg_height_c29_din,
        if_full_n => HwReg_height_c29_full_n,
        if_write => AXIvideo2MultiPixStream_U0_HwReg_height_c29_write,
        if_dout => HwReg_height_c29_dout,
        if_num_data_valid => HwReg_height_c29_num_data_valid,
        if_fifo_cap => HwReg_height_c29_fifo_cap,
        if_empty_n => HwReg_height_c29_empty_n,
        if_read => v_vcresampler_core_1_U0_HwReg_height_read);

    stream_in_vresampled_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_1_U0_stream_in_vresampled_din,
        if_full_n => stream_in_vresampled_full_n,
        if_write => v_vcresampler_core_1_U0_stream_in_vresampled_write,
        if_dout => stream_in_vresampled_dout,
        if_num_data_valid => stream_in_vresampled_num_data_valid,
        if_fifo_cap => stream_in_vresampled_fifo_cap,
        if_empty_n => stream_in_vresampled_empty_n,
        if_read => v_hcresampler_core_2_U0_stream_in_vresampled_read);

    HwReg_width_c22_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_1_U0_HwReg_width_c22_din,
        if_full_n => HwReg_width_c22_full_n,
        if_write => v_vcresampler_core_1_U0_HwReg_width_c22_write,
        if_dout => HwReg_width_c22_dout,
        if_num_data_valid => HwReg_width_c22_num_data_valid,
        if_fifo_cap => HwReg_width_c22_fifo_cap,
        if_empty_n => HwReg_width_c22_empty_n,
        if_read => v_hcresampler_core_2_U0_HwReg_width_read);

    HwReg_height_c28_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_1_U0_HwReg_height_c28_din,
        if_full_n => HwReg_height_c28_full_n,
        if_write => v_vcresampler_core_1_U0_HwReg_height_c28_write,
        if_dout => HwReg_height_c28_dout,
        if_num_data_valid => HwReg_height_c28_num_data_valid,
        if_fifo_cap => HwReg_height_c28_fifo_cap,
        if_empty_n => HwReg_height_c28_empty_n,
        if_read => v_hcresampler_core_2_U0_HwReg_height_read);

    stream_in_hresampled_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_2_U0_stream_in_hresampled_din,
        if_full_n => stream_in_hresampled_full_n,
        if_write => v_hcresampler_core_2_U0_stream_in_hresampled_write,
        if_dout => stream_in_hresampled_dout,
        if_num_data_valid => stream_in_hresampled_num_data_valid,
        if_fifo_cap => stream_in_hresampled_fifo_cap,
        if_empty_n => stream_in_hresampled_empty_n,
        if_read => v_csc_core_U0_stream_in_hresampled_read);

    HwReg_width_c21_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_2_U0_HwReg_width_c21_din,
        if_full_n => HwReg_width_c21_full_n,
        if_write => v_hcresampler_core_2_U0_HwReg_width_c21_write,
        if_dout => HwReg_width_c21_dout,
        if_num_data_valid => HwReg_width_c21_num_data_valid,
        if_fifo_cap => HwReg_width_c21_fifo_cap,
        if_empty_n => HwReg_width_c21_empty_n,
        if_read => v_csc_core_U0_width_read);

    HwReg_height_c27_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_2_U0_HwReg_height_c27_din,
        if_full_n => HwReg_height_c27_full_n,
        if_write => v_hcresampler_core_2_U0_HwReg_height_c27_write,
        if_dout => HwReg_height_c27_dout,
        if_num_data_valid => HwReg_height_c27_num_data_valid,
        if_fifo_cap => HwReg_height_c27_fifo_cap,
        if_empty_n => HwReg_height_c27_empty_n,
        if_read => v_csc_core_U0_height_read);

    stream_csc_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_csc_core_U0_stream_csc_din,
        if_full_n => stream_csc_full_n,
        if_write => v_csc_core_U0_stream_csc_write,
        if_dout => stream_csc_dout,
        if_num_data_valid => stream_csc_num_data_valid,
        if_fifo_cap => stream_csc_fifo_cap,
        if_empty_n => stream_csc_empty_n,
        if_read => v_hcresampler_core_U0_stream_csc_read);

    HwReg_width_c20_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_csc_core_U0_HwReg_width_c20_din,
        if_full_n => HwReg_width_c20_full_n,
        if_write => v_csc_core_U0_HwReg_width_c20_write,
        if_dout => HwReg_width_c20_dout,
        if_num_data_valid => HwReg_width_c20_num_data_valid,
        if_fifo_cap => HwReg_width_c20_fifo_cap,
        if_empty_n => HwReg_width_c20_empty_n,
        if_read => v_hcresampler_core_U0_HwReg_width_read);

    HwReg_height_c26_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_csc_core_U0_HwReg_height_c26_din,
        if_full_n => HwReg_height_c26_full_n,
        if_write => v_csc_core_U0_HwReg_height_c26_write,
        if_dout => HwReg_height_c26_dout,
        if_num_data_valid => HwReg_height_c26_num_data_valid,
        if_fifo_cap => HwReg_height_c26_fifo_cap,
        if_empty_n => HwReg_height_c26_empty_n,
        if_read => v_hcresampler_core_U0_HwReg_height_read);

    stream_out_hresampled_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_U0_stream_out_hresampled_din,
        if_full_n => stream_out_hresampled_full_n,
        if_write => v_hcresampler_core_U0_stream_out_hresampled_write,
        if_dout => stream_out_hresampled_dout,
        if_num_data_valid => stream_out_hresampled_num_data_valid,
        if_fifo_cap => stream_out_hresampled_fifo_cap,
        if_empty_n => stream_out_hresampled_empty_n,
        if_read => v_vcresampler_core_U0_stream_out_hresampled_read);

    HwReg_width_c19_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_U0_HwReg_width_c19_din,
        if_full_n => HwReg_width_c19_full_n,
        if_write => v_hcresampler_core_U0_HwReg_width_c19_write,
        if_dout => HwReg_width_c19_dout,
        if_num_data_valid => HwReg_width_c19_num_data_valid,
        if_fifo_cap => HwReg_width_c19_fifo_cap,
        if_empty_n => HwReg_width_c19_empty_n,
        if_read => v_vcresampler_core_U0_HwReg_width_read);

    HwReg_height_c25_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_hcresampler_core_U0_HwReg_height_c25_din,
        if_full_n => HwReg_height_c25_full_n,
        if_write => v_hcresampler_core_U0_HwReg_height_c25_write,
        if_dout => HwReg_height_c25_dout,
        if_num_data_valid => HwReg_height_c25_num_data_valid,
        if_fifo_cap => HwReg_height_c25_fifo_cap,
        if_empty_n => HwReg_height_c25_empty_n,
        if_read => v_vcresampler_core_U0_HwReg_height_read);

    stream_out_vresampled_U : component bd_85a6_csc_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_U0_stream_out_vresampled_din,
        if_full_n => stream_out_vresampled_full_n,
        if_write => v_vcresampler_core_U0_stream_out_vresampled_write,
        if_dout => stream_out_vresampled_dout,
        if_num_data_valid => stream_out_vresampled_num_data_valid,
        if_fifo_cap => stream_out_vresampled_fifo_cap,
        if_empty_n => stream_out_vresampled_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_stream_out_vresampled_read);

    HwReg_width_c_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_U0_HwReg_width_c_din,
        if_full_n => HwReg_width_c_full_n,
        if_write => v_vcresampler_core_U0_HwReg_width_c_write,
        if_dout => HwReg_width_c_dout,
        if_num_data_valid => HwReg_width_c_num_data_valid,
        if_fifo_cap => HwReg_width_c_fifo_cap,
        if_empty_n => HwReg_width_c_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_WidthOut_read);

    HwReg_height_c_U : component bd_85a6_csc_0_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => v_vcresampler_core_U0_HwReg_height_c_din,
        if_full_n => HwReg_height_c_full_n,
        if_write => v_vcresampler_core_U0_HwReg_height_c_write,
        if_dout => HwReg_height_c_dout,
        if_num_data_valid => HwReg_height_c_num_data_valid,
        if_fifo_cap => HwReg_height_c_fifo_cap,
        if_empty_n => HwReg_height_c_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_Height_read);





    ap_sync_reg_channel_write_HwReg_BOffset_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_BOffset_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_BOffset_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_BOffset_2_channel <= ap_sync_channel_write_HwReg_BOffset_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_BOffset_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_BOffset_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_BOffset_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_BOffset_channel <= ap_sync_channel_write_HwReg_BOffset_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ClampMin_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ClampMin_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ClampMin_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ClampMin_2_channel <= ap_sync_channel_write_HwReg_ClampMin_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ClampMin_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ClampMin_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ClampMin_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ClampMin_channel <= ap_sync_channel_write_HwReg_ClampMin_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ClipMax_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ClipMax_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ClipMax_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ClipMax_2_channel <= ap_sync_channel_write_HwReg_ClipMax_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ClipMax_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ClipMax_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ClipMax_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ClipMax_channel <= ap_sync_channel_write_HwReg_ClipMax_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ColEnd_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ColEnd_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ColEnd_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ColEnd_channel <= ap_sync_channel_write_HwReg_ColEnd_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ColStart_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ColStart_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ColStart_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ColStart_channel <= ap_sync_channel_write_HwReg_ColStart_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_GOffset_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_GOffset_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_GOffset_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_GOffset_2_channel <= ap_sync_channel_write_HwReg_GOffset_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_GOffset_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_GOffset_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_GOffset_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_GOffset_channel <= ap_sync_channel_write_HwReg_GOffset_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_InVideoFormat_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_InVideoFormat_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_InVideoFormat_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_InVideoFormat_channel <= ap_sync_channel_write_HwReg_InVideoFormat_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K11_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K11_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K11_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K11_2_channel <= ap_sync_channel_write_HwReg_K11_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K11_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K11_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K11_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K11_channel <= ap_sync_channel_write_HwReg_K11_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K12_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K12_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K12_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K12_2_channel <= ap_sync_channel_write_HwReg_K12_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K12_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K12_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K12_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K12_channel <= ap_sync_channel_write_HwReg_K12_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K13_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K13_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K13_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K13_2_channel <= ap_sync_channel_write_HwReg_K13_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K13_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K13_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K13_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K13_channel <= ap_sync_channel_write_HwReg_K13_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K21_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K21_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K21_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K21_2_channel <= ap_sync_channel_write_HwReg_K21_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K21_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K21_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K21_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K21_channel <= ap_sync_channel_write_HwReg_K21_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K22_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K22_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K22_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K22_2_channel <= ap_sync_channel_write_HwReg_K22_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K22_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K22_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K22_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K22_channel <= ap_sync_channel_write_HwReg_K22_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K23_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K23_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K23_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K23_2_channel <= ap_sync_channel_write_HwReg_K23_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K23_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K23_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K23_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K23_channel <= ap_sync_channel_write_HwReg_K23_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K31_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K31_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K31_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K31_2_channel <= ap_sync_channel_write_HwReg_K31_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K31_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K31_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K31_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K31_channel <= ap_sync_channel_write_HwReg_K31_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K32_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K32_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K32_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K32_2_channel <= ap_sync_channel_write_HwReg_K32_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K32_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K32_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K32_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K32_channel <= ap_sync_channel_write_HwReg_K32_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K33_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K33_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K33_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K33_2_channel <= ap_sync_channel_write_HwReg_K33_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_K33_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_K33_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_K33_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_K33_channel <= ap_sync_channel_write_HwReg_K33_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel <= ap_sync_channel_write_HwReg_OutVideoFormat_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ROffset_2_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ROffset_2_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ROffset_2_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ROffset_2_channel <= ap_sync_channel_write_HwReg_ROffset_2_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_ROffset_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_ROffset_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_ROffset_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_ROffset_channel <= ap_sync_channel_write_HwReg_ROffset_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_RowEnd_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_RowEnd_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_RowEnd_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_RowEnd_channel <= ap_sync_channel_write_HwReg_RowEnd_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_RowStart_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_RowStart_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_RowStart_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_RowStart_channel <= ap_sync_channel_write_HwReg_RowStart_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_height_c30_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_height_c30_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_height_c30_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_height_c30_channel <= ap_sync_channel_write_HwReg_height_c30_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_HwReg_width_c24_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_HwReg_width_c24_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_HwReg_width_c24_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_HwReg_width_c24_channel <= ap_sync_channel_write_HwReg_width_c24_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_bPassThru_420_In_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_bPassThru_420_In_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_bPassThru_420_In_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_bPassThru_420_In_loc_channel <= ap_sync_channel_write_bPassThru_420_In_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel <= ap_sync_channel_write_bPassThru_420_Out_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel <= ap_sync_channel_write_bPassThru_422_or_420_In_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel <= ap_const_logic_0;
            else
                if (((Block_entry3_proc_U0_ap_done and Block_entry3_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel <= ap_sync_channel_write_bPassThru_422_or_420_Out_loc_channel;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2MultiPixStream_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2MultiPixStream_U0_ap_start <= (HwReg_width_c24_channel_empty_n and HwReg_height_c30_channel_empty_n and HwReg_InVideoFormat_channel_empty_n);
    Block_entry3_proc_U0_ap_continue <= (ap_sync_channel_write_bPassThru_422_or_420_Out_loc_channel and ap_sync_channel_write_bPassThru_422_or_420_In_loc_channel and ap_sync_channel_write_bPassThru_420_Out_loc_channel and ap_sync_channel_write_bPassThru_420_In_loc_channel and ap_sync_channel_write_HwReg_width_c24_channel and ap_sync_channel_write_HwReg_height_c30_channel and ap_sync_channel_write_HwReg_RowStart_channel and ap_sync_channel_write_HwReg_RowEnd_channel and ap_sync_channel_write_HwReg_ROffset_channel and ap_sync_channel_write_HwReg_ROffset_2_channel and ap_sync_channel_write_HwReg_OutVideoFormat_channel and ap_sync_channel_write_HwReg_K33_channel and ap_sync_channel_write_HwReg_K33_2_channel and ap_sync_channel_write_HwReg_K32_channel and ap_sync_channel_write_HwReg_K32_2_channel and ap_sync_channel_write_HwReg_K31_channel and ap_sync_channel_write_HwReg_K31_2_channel and ap_sync_channel_write_HwReg_K23_channel and ap_sync_channel_write_HwReg_K23_2_channel and ap_sync_channel_write_HwReg_K22_channel and ap_sync_channel_write_HwReg_K22_2_channel 
    and ap_sync_channel_write_HwReg_K21_channel and ap_sync_channel_write_HwReg_K21_2_channel and ap_sync_channel_write_HwReg_K13_channel and ap_sync_channel_write_HwReg_K13_2_channel and ap_sync_channel_write_HwReg_K12_channel and ap_sync_channel_write_HwReg_K12_2_channel and ap_sync_channel_write_HwReg_K11_channel and ap_sync_channel_write_HwReg_K11_2_channel and ap_sync_channel_write_HwReg_InVideoFormat_channel and ap_sync_channel_write_HwReg_GOffset_channel and ap_sync_channel_write_HwReg_GOffset_2_channel and ap_sync_channel_write_HwReg_ColStart_channel and ap_sync_channel_write_HwReg_ColEnd_channel and ap_sync_channel_write_HwReg_ClipMax_channel and ap_sync_channel_write_HwReg_ClipMax_2_channel and ap_sync_channel_write_HwReg_ClampMin_channel and ap_sync_channel_write_HwReg_ClampMin_2_channel and ap_sync_channel_write_HwReg_BOffset_channel and ap_sync_channel_write_HwReg_BOffset_2_channel);
    Block_entry3_proc_U0_ap_start <= ap_start;
    MultiPixStream2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    MultiPixStream2AXIvideo_U0_ap_start <= HwReg_OutVideoFormat_channel_empty_n;
    ap_channel_done_HwReg_BOffset_2_channel <= ((ap_sync_reg_channel_write_HwReg_BOffset_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_BOffset_channel <= ((ap_sync_reg_channel_write_HwReg_BOffset_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ClampMin_2_channel <= ((ap_sync_reg_channel_write_HwReg_ClampMin_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ClampMin_channel <= ((ap_sync_reg_channel_write_HwReg_ClampMin_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ClipMax_2_channel <= ((ap_sync_reg_channel_write_HwReg_ClipMax_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ClipMax_channel <= ((ap_sync_reg_channel_write_HwReg_ClipMax_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ColEnd_channel <= ((ap_sync_reg_channel_write_HwReg_ColEnd_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ColStart_channel <= ((ap_sync_reg_channel_write_HwReg_ColStart_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_GOffset_2_channel <= ((ap_sync_reg_channel_write_HwReg_GOffset_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_GOffset_channel <= ((ap_sync_reg_channel_write_HwReg_GOffset_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_InVideoFormat_channel <= ((ap_sync_reg_channel_write_HwReg_InVideoFormat_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K11_2_channel <= ((ap_sync_reg_channel_write_HwReg_K11_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K11_channel <= ((ap_sync_reg_channel_write_HwReg_K11_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K12_2_channel <= ((ap_sync_reg_channel_write_HwReg_K12_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K12_channel <= ((ap_sync_reg_channel_write_HwReg_K12_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K13_2_channel <= ((ap_sync_reg_channel_write_HwReg_K13_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K13_channel <= ((ap_sync_reg_channel_write_HwReg_K13_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K21_2_channel <= ((ap_sync_reg_channel_write_HwReg_K21_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K21_channel <= ((ap_sync_reg_channel_write_HwReg_K21_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K22_2_channel <= ((ap_sync_reg_channel_write_HwReg_K22_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K22_channel <= ((ap_sync_reg_channel_write_HwReg_K22_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K23_2_channel <= ((ap_sync_reg_channel_write_HwReg_K23_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K23_channel <= ((ap_sync_reg_channel_write_HwReg_K23_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K31_2_channel <= ((ap_sync_reg_channel_write_HwReg_K31_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K31_channel <= ((ap_sync_reg_channel_write_HwReg_K31_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K32_2_channel <= ((ap_sync_reg_channel_write_HwReg_K32_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K32_channel <= ((ap_sync_reg_channel_write_HwReg_K32_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K33_2_channel <= ((ap_sync_reg_channel_write_HwReg_K33_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_K33_channel <= ((ap_sync_reg_channel_write_HwReg_K33_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_OutVideoFormat_channel <= ((ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ROffset_2_channel <= ((ap_sync_reg_channel_write_HwReg_ROffset_2_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_ROffset_channel <= ((ap_sync_reg_channel_write_HwReg_ROffset_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_RowEnd_channel <= ((ap_sync_reg_channel_write_HwReg_RowEnd_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_RowStart_channel <= ((ap_sync_reg_channel_write_HwReg_RowStart_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_height_c30_channel <= ((ap_sync_reg_channel_write_HwReg_height_c30_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_HwReg_width_c24_channel <= ((ap_sync_reg_channel_write_HwReg_width_c24_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_bPassThru_420_In_loc_channel <= ((ap_sync_reg_channel_write_bPassThru_420_In_loc_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_bPassThru_420_Out_loc_channel <= ((ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_bPassThru_422_or_420_In_loc_channel <= ((ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_channel_done_bPassThru_422_or_420_Out_loc_channel <= ((ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel xor ap_const_logic_1) and Block_entry3_proc_U0_ap_done);
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (v_vcresampler_core_U0_ap_idle and v_vcresampler_core_1_U0_ap_idle and v_hcresampler_core_U0_ap_idle and v_hcresampler_core_2_U0_ap_idle and v_csc_core_U0_ap_idle and (ap_const_logic_1 xor HwReg_K31_channel_empty_n) and (ap_const_logic_1 xor HwReg_K23_channel_empty_n) and (ap_const_logic_1 xor HwReg_K22_channel_empty_n) and (ap_const_logic_1 xor HwReg_K21_channel_empty_n) and (ap_const_logic_1 xor HwReg_K13_channel_empty_n) and (ap_const_logic_1 xor HwReg_K12_channel_empty_n) and (ap_const_logic_1 xor HwReg_K11_channel_empty_n) and (ap_const_logic_1 xor HwReg_RowEnd_channel_empty_n) and (ap_const_logic_1 xor HwReg_RowStart_channel_empty_n) and (ap_const_logic_1 xor HwReg_ColEnd_channel_empty_n) and (ap_const_logic_1 xor HwReg_ColStart_channel_empty_n) and (ap_const_logic_1 xor HwReg_OutVideoFormat_channel_empty_n) and (ap_const_logic_1 xor HwReg_InVideoFormat_channel_empty_n) and (ap_const_logic_1 xor HwReg_height_c30_channel_empty_n) and (ap_const_logic_1 xor HwReg_width_c24_channel_empty_n) and (ap_const_logic_1 
    xor HwReg_ClipMax_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_ClampMin_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_BOffset_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_GOffset_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_ROffset_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K33_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K32_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K31_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K23_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K22_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K21_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K13_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K12_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_K11_2_channel_empty_n) and (ap_const_logic_1 xor HwReg_ClipMax_channel_empty_n) and (ap_const_logic_1 xor HwReg_ClampMin_channel_empty_n) and (ap_const_logic_1 xor HwReg_BOffset_channel_empty_n) and (ap_const_logic_1 xor HwReg_GOffset_channel_empty_n) and (ap_const_logic_1 xor HwReg_ROffset_channel_empty_n) 
    and (ap_const_logic_1 xor HwReg_K33_channel_empty_n) and (ap_const_logic_1 xor HwReg_K32_channel_empty_n) and (bPassThru_422_or_420_Out_loc_channel_empty_n xor ap_const_logic_1) and (bPassThru_422_or_420_In_loc_channel_empty_n xor ap_const_logic_1) and (bPassThru_420_Out_loc_channel_empty_n xor ap_const_logic_1) and (bPassThru_420_In_loc_channel_empty_n xor ap_const_logic_1) and MultiPixStream2AXIvideo_U0_ap_idle and Block_entry3_proc_U0_ap_idle and AXIvideo2MultiPixStream_U0_ap_idle);
    ap_ready <= Block_entry3_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_HwReg_BOffset_2_channel <= ((ap_channel_done_HwReg_BOffset_2_channel and HwReg_BOffset_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_BOffset_2_channel);
    ap_sync_channel_write_HwReg_BOffset_channel <= ((ap_channel_done_HwReg_BOffset_channel and HwReg_BOffset_channel_full_n) or ap_sync_reg_channel_write_HwReg_BOffset_channel);
    ap_sync_channel_write_HwReg_ClampMin_2_channel <= ((ap_channel_done_HwReg_ClampMin_2_channel and HwReg_ClampMin_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_ClampMin_2_channel);
    ap_sync_channel_write_HwReg_ClampMin_channel <= ((ap_channel_done_HwReg_ClampMin_channel and HwReg_ClampMin_channel_full_n) or ap_sync_reg_channel_write_HwReg_ClampMin_channel);
    ap_sync_channel_write_HwReg_ClipMax_2_channel <= ((ap_channel_done_HwReg_ClipMax_2_channel and HwReg_ClipMax_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_ClipMax_2_channel);
    ap_sync_channel_write_HwReg_ClipMax_channel <= ((ap_channel_done_HwReg_ClipMax_channel and HwReg_ClipMax_channel_full_n) or ap_sync_reg_channel_write_HwReg_ClipMax_channel);
    ap_sync_channel_write_HwReg_ColEnd_channel <= ((ap_channel_done_HwReg_ColEnd_channel and HwReg_ColEnd_channel_full_n) or ap_sync_reg_channel_write_HwReg_ColEnd_channel);
    ap_sync_channel_write_HwReg_ColStart_channel <= ((ap_channel_done_HwReg_ColStart_channel and HwReg_ColStart_channel_full_n) or ap_sync_reg_channel_write_HwReg_ColStart_channel);
    ap_sync_channel_write_HwReg_GOffset_2_channel <= ((ap_channel_done_HwReg_GOffset_2_channel and HwReg_GOffset_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_GOffset_2_channel);
    ap_sync_channel_write_HwReg_GOffset_channel <= ((ap_channel_done_HwReg_GOffset_channel and HwReg_GOffset_channel_full_n) or ap_sync_reg_channel_write_HwReg_GOffset_channel);
    ap_sync_channel_write_HwReg_InVideoFormat_channel <= ((ap_channel_done_HwReg_InVideoFormat_channel and HwReg_InVideoFormat_channel_full_n) or ap_sync_reg_channel_write_HwReg_InVideoFormat_channel);
    ap_sync_channel_write_HwReg_K11_2_channel <= ((ap_channel_done_HwReg_K11_2_channel and HwReg_K11_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K11_2_channel);
    ap_sync_channel_write_HwReg_K11_channel <= ((ap_channel_done_HwReg_K11_channel and HwReg_K11_channel_full_n) or ap_sync_reg_channel_write_HwReg_K11_channel);
    ap_sync_channel_write_HwReg_K12_2_channel <= ((ap_channel_done_HwReg_K12_2_channel and HwReg_K12_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K12_2_channel);
    ap_sync_channel_write_HwReg_K12_channel <= ((ap_channel_done_HwReg_K12_channel and HwReg_K12_channel_full_n) or ap_sync_reg_channel_write_HwReg_K12_channel);
    ap_sync_channel_write_HwReg_K13_2_channel <= ((ap_channel_done_HwReg_K13_2_channel and HwReg_K13_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K13_2_channel);
    ap_sync_channel_write_HwReg_K13_channel <= ((ap_channel_done_HwReg_K13_channel and HwReg_K13_channel_full_n) or ap_sync_reg_channel_write_HwReg_K13_channel);
    ap_sync_channel_write_HwReg_K21_2_channel <= ((ap_channel_done_HwReg_K21_2_channel and HwReg_K21_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K21_2_channel);
    ap_sync_channel_write_HwReg_K21_channel <= ((ap_channel_done_HwReg_K21_channel and HwReg_K21_channel_full_n) or ap_sync_reg_channel_write_HwReg_K21_channel);
    ap_sync_channel_write_HwReg_K22_2_channel <= ((ap_channel_done_HwReg_K22_2_channel and HwReg_K22_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K22_2_channel);
    ap_sync_channel_write_HwReg_K22_channel <= ((ap_channel_done_HwReg_K22_channel and HwReg_K22_channel_full_n) or ap_sync_reg_channel_write_HwReg_K22_channel);
    ap_sync_channel_write_HwReg_K23_2_channel <= ((ap_channel_done_HwReg_K23_2_channel and HwReg_K23_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K23_2_channel);
    ap_sync_channel_write_HwReg_K23_channel <= ((ap_channel_done_HwReg_K23_channel and HwReg_K23_channel_full_n) or ap_sync_reg_channel_write_HwReg_K23_channel);
    ap_sync_channel_write_HwReg_K31_2_channel <= ((ap_channel_done_HwReg_K31_2_channel and HwReg_K31_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K31_2_channel);
    ap_sync_channel_write_HwReg_K31_channel <= ((ap_channel_done_HwReg_K31_channel and HwReg_K31_channel_full_n) or ap_sync_reg_channel_write_HwReg_K31_channel);
    ap_sync_channel_write_HwReg_K32_2_channel <= ((ap_channel_done_HwReg_K32_2_channel and HwReg_K32_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K32_2_channel);
    ap_sync_channel_write_HwReg_K32_channel <= ((ap_channel_done_HwReg_K32_channel and HwReg_K32_channel_full_n) or ap_sync_reg_channel_write_HwReg_K32_channel);
    ap_sync_channel_write_HwReg_K33_2_channel <= ((ap_channel_done_HwReg_K33_2_channel and HwReg_K33_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_K33_2_channel);
    ap_sync_channel_write_HwReg_K33_channel <= ((ap_channel_done_HwReg_K33_channel and HwReg_K33_channel_full_n) or ap_sync_reg_channel_write_HwReg_K33_channel);
    ap_sync_channel_write_HwReg_OutVideoFormat_channel <= ((ap_channel_done_HwReg_OutVideoFormat_channel and HwReg_OutVideoFormat_channel_full_n) or ap_sync_reg_channel_write_HwReg_OutVideoFormat_channel);
    ap_sync_channel_write_HwReg_ROffset_2_channel <= ((ap_channel_done_HwReg_ROffset_2_channel and HwReg_ROffset_2_channel_full_n) or ap_sync_reg_channel_write_HwReg_ROffset_2_channel);
    ap_sync_channel_write_HwReg_ROffset_channel <= ((ap_channel_done_HwReg_ROffset_channel and HwReg_ROffset_channel_full_n) or ap_sync_reg_channel_write_HwReg_ROffset_channel);
    ap_sync_channel_write_HwReg_RowEnd_channel <= ((ap_channel_done_HwReg_RowEnd_channel and HwReg_RowEnd_channel_full_n) or ap_sync_reg_channel_write_HwReg_RowEnd_channel);
    ap_sync_channel_write_HwReg_RowStart_channel <= ((ap_channel_done_HwReg_RowStart_channel and HwReg_RowStart_channel_full_n) or ap_sync_reg_channel_write_HwReg_RowStart_channel);
    ap_sync_channel_write_HwReg_height_c30_channel <= ((ap_channel_done_HwReg_height_c30_channel and HwReg_height_c30_channel_full_n) or ap_sync_reg_channel_write_HwReg_height_c30_channel);
    ap_sync_channel_write_HwReg_width_c24_channel <= ((ap_channel_done_HwReg_width_c24_channel and HwReg_width_c24_channel_full_n) or ap_sync_reg_channel_write_HwReg_width_c24_channel);
    ap_sync_channel_write_bPassThru_420_In_loc_channel <= ((bPassThru_420_In_loc_channel_full_n and ap_channel_done_bPassThru_420_In_loc_channel) or ap_sync_reg_channel_write_bPassThru_420_In_loc_channel);
    ap_sync_channel_write_bPassThru_420_Out_loc_channel <= ((bPassThru_420_Out_loc_channel_full_n and ap_channel_done_bPassThru_420_Out_loc_channel) or ap_sync_reg_channel_write_bPassThru_420_Out_loc_channel);
    ap_sync_channel_write_bPassThru_422_or_420_In_loc_channel <= ((bPassThru_422_or_420_In_loc_channel_full_n and ap_channel_done_bPassThru_422_or_420_In_loc_channel) or ap_sync_reg_channel_write_bPassThru_422_or_420_In_loc_channel);
    ap_sync_channel_write_bPassThru_422_or_420_Out_loc_channel <= ((bPassThru_422_or_420_Out_loc_channel_full_n and ap_channel_done_bPassThru_422_or_420_Out_loc_channel) or ap_sync_reg_channel_write_bPassThru_422_or_420_Out_loc_channel);
    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    s_axis_video_TREADY <= AXIvideo2MultiPixStream_U0_s_axis_video_TREADY;
    v_csc_core_U0_ap_continue <= ap_const_logic_1;
    v_csc_core_U0_ap_start <= (HwReg_RowStart_channel_empty_n and HwReg_RowEnd_channel_empty_n and HwReg_ROffset_channel_empty_n and HwReg_ROffset_2_channel_empty_n and HwReg_K33_channel_empty_n and HwReg_K33_2_channel_empty_n and HwReg_K32_channel_empty_n and HwReg_K32_2_channel_empty_n and HwReg_K31_channel_empty_n and HwReg_K31_2_channel_empty_n and HwReg_K23_channel_empty_n and HwReg_K23_2_channel_empty_n and HwReg_K22_channel_empty_n and HwReg_K22_2_channel_empty_n and HwReg_K21_channel_empty_n and HwReg_K21_2_channel_empty_n and HwReg_K13_channel_empty_n and HwReg_K13_2_channel_empty_n and HwReg_K12_channel_empty_n and HwReg_K12_2_channel_empty_n and HwReg_K11_channel_empty_n and HwReg_K11_2_channel_empty_n and HwReg_GOffset_channel_empty_n and HwReg_GOffset_2_channel_empty_n and HwReg_ColStart_channel_empty_n and HwReg_ColEnd_channel_empty_n and HwReg_ClipMax_channel_empty_n and HwReg_ClipMax_2_channel_empty_n and HwReg_ClampMin_channel_empty_n and HwReg_ClampMin_2_channel_empty_n and HwReg_BOffset_channel_empty_n and HwReg_BOffset_2_channel_empty_n);
    v_hcresampler_core_2_U0_ap_continue <= ap_const_logic_1;
    v_hcresampler_core_2_U0_ap_start <= bPassThru_422_or_420_In_loc_channel_empty_n;
    v_hcresampler_core_U0_ap_continue <= ap_const_logic_1;
    v_hcresampler_core_U0_ap_start <= bPassThru_422_or_420_Out_loc_channel_empty_n;
    v_vcresampler_core_1_U0_ap_continue <= ap_const_logic_1;
    v_vcresampler_core_1_U0_ap_start <= bPassThru_420_In_loc_channel_empty_n;
    v_vcresampler_core_U0_ap_continue <= ap_const_logic_1;
    v_vcresampler_core_U0_ap_start <= bPassThru_420_Out_loc_channel_empty_n;
end behav;
